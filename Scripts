OCA Oracle Database 
SQL Expert 
Exam Guide
(Exam 1Z0-047)
-
SQL Scripts 
Reference and Workbook

Author: Steve O'Hearn

NOTE: This document is intended to be published as an electronic document.


How to Use This Document
This document is intended to be published as an electronic document.  
This document is a supplement to the book OCA Oracle Database SQL Expert Exam Guide: Exam 1Z0-047, by Steve O'Hearn.  It is designed to assist those readers wishing to perform hands-on work using the SQL scripts in the book.  
The chapters in this document correspond to the chapters in the book OCA Oracle Database SQL Expert Exam Guide: Exam 1Z0-047.  For each chapter, this document contains the following:
- Instructions for installing database objects for that chapter, if required
- Electronic copies of each SQL script specified in the book, by chapter and page number
- Instructions and notes pertaining to unusual situations, such as SQL scripts that are deliberately written to create an error message, or interim setup scripts required to continue through the scripts in the given chapter.
Using this document, a reader may choose to do any of the following:
- Pick any random chapter of the book, look up the corresponding chapter in this document, and starting at the beginning of that selected chapter in this document, perform the specified "SETUP" instructions, then continue through the scripts in the chapter.
- Start at beginning of the book and work through each chapter to the very end.
- Play what-if games using any scripts found herein, as desired.
This document is certainly not needed to get the most out of the book.  But I'm making it available to you as one of the many tools you may wish to use in your journey toward earning and maintaining your status as an Oracle certified SQL Expert.
If you have any questions or comments, please do not hesitate to contact me at soh@corbinian.com - I love hearing from readers and look forward to hearing from you!  In the meantime, good luck and best wishes for great success.
All my best,
Steve O'Hearn
Email: soh@corbinian.com 
http://www.corbinian.com 



A Note About Database Objects
I recommend that you use a standalone Oracle instance to test the scripts in this database.  Keep in mind that you'll need to create the following user accounts and public synonyms:
USER ACCOUNTS:
- CODD
- EFCODD
- HARDY
- HAROLD
- HENRY
- JOAN
- LARRY
- LAUREL
- LISA
- NEWOWNER
PUBLIC SYNONYMS:
- ACCT_01
- CO
- PORTS 
- WEBINARS
- WH
If you choose to run these scripts in an Oracle database that is home to other database objects, be sure to confirm that your existing objects do not have the same names as are shown above.  If so, you'll need to edit these scripts to avoid inadvertently dropping any of the above objects you already have and wish to retain. 




Table of Contents
1.	Introduction to SQL	14
Setup	14
Page 19	14
2.	Using DDL Statements to Create and Manage Table	16
Setup	16
Page 50	16
Page 54	16
Page 55	17
Page 58	17
Page 59	18
Page 66	18
Page 67	18
Page 68	19
Page 69	20
Page 70	21
Page 71	23
Page 72	24
Page 74	25
Page 75	25
Page 77	25
Page 78	26
Page 79	26
3.	Manipulating Data	28
Setup	28
Page 99	28
Page 101	29
Page 102	29
Page 103	30
Page 104	30
Page 105	31
Page 106	31
Page 108	32
Page 109	32
Page 111	33
Page 113	34
Page 114	35
Page 117	36
Page 118	36
Page 119	36
Page 120	38
Page 121	38
Page 122	38
4.	Retrieving Data Using the SQL SELECT Statement	39
Setup	39
Page 139	46
Page 141	46
Page 142	46
Page 143	46
Page 144	47
Page 145	47
Page 146	47
Page 147	47
Page 149	48
Page 150	48
Page 153	48
Page 154	49
5.	Restricting and Sorting Data	50
Setup	50
Page 171	64
Page 174	64
Page 175	64
Page 176	64
Page 177	65
Page 179	65
Page 180	66
Page 181	66
Page 182	66
Page 183	67
Page 186	68
Page 188	68
Page 190	69
Page 191	69
Page 192	70
Page 193	70
6.	Using Single-Row Functions to Customize Output	72
Setup	72
Page 210	84
Page 215	85
Page 216	85
Page 217	85
Page 218	86
Page 219	86
Page 220	86
Page 221	87
Page 222	87
Page 223	87
Page 224	87
Page 225	88
Page 226	88
Page 227	88
Page 228	89
Page 229	89
Page 230	89
Page 231	89
Page 232	90
Page 233	90
Page 235	90
Page 236	91
Page 237	91
Page 239	91
Page 240	92
Page 241	92
Page 242	92
Page 244	93
Page 245	93
Page 246	93
Page 247	93
Page 249	94
Page 250	94
Page 252	94
Page 253	94
Page 254	95
Page 255	95
Page 256	95
Page 257	96
Page 258	96
Page 259	96
Page 260	96
Page 261	97
Page 262	97
7.	Reporting Aggregated Data Using the Group Functions	98
Setup	98
Page 278	105
Page 279	106
Page 280	106
Page 281	106
Page 282	107
Page 283	107
Page 284	107
Page 286	107
Page 287	108
Page 288	108
Page 289	109
Page 290	109
Page 291	109
Page 292	110
Page 293	110
Page 294	110
Page 295	111
Page 297	111
8.	Displaying Data from Multiple Tables	112
Setup	112
Page 317	129
Page 318	129
Page 319	130
Page 320	130
Page 321	131
Page 322	131
Page 323	131
Page 324	132
Page 325	132
Page 327	132
Page 329	132
Page 330	133
Page 331	133
9.	Retrieving Data Using Subqueries	134
Setup	134
Page 350	148
Page 351	149
Page 352	149
Page 353	150
Page 354	150
Page 356	150
Page 357	151
Page 358	151
Page 359	151
Page 361	151
Page 363	152
Page 364	152
Page 365	152
Page 366	153
10.	Creating Other Schema Objects	154
Setup	154
Page 383	170
Page 384	171
Page 385	171
Page 386	171
Page 387	172
Page 388	172
Page 389	173
Page 390	173
Page 392	174
Page 394	174
Page 395	175
Page 397	176
Page 398	176
Page 399	176
Page 402	177
Page 403	177
Page 404	177
Page 405	177
Page 406	178
Page 407	178
Page 408	180
Page 409	180
Page 410	180
11.	Managing Schema Objects	181
Setup	181
Page 424	181
Page 425	181
Page 426	181
Page 427	182
Page 428	182
Page 430	182
Page 431	183
Page 432	184
Page 433	184
Page 435	185
Page 436	185
Page 437	186
Page 438	186
Page 439	187
Page 443	187
Page 444	188
Page 445	188
Page 446	188
Page 447	188
Page 448	189
Page 449	189
Page 450	190
Page 451	190
Page 452	191
Page 453	191
Page 454	192
Page 455	192
Page 456	193
Page 457	194
Page 458	194
Page 460	195
Page 461	195
Page 462	195
Page 463	196
Page 464	196
Page 465	197
Page 466	197
Page 467	197
Page 468	197
Page 470	198
Page 471	198
Page 472	199
Page 473	199
Page 474	199
12.	Using the Set Operators	200
Setup	200
Page 491	204
Page 492	204
Page 493	205
Page 494	205
Page 495	205
Page 497	206
Page 498	206
Page 499	206
13.	Generating Reports by Grouping Related Data	208
Setup	208
Page 513	210
Page 514	211
Page 516	211
Page 517	211
Page 518	212
Page 519	212
Page 520	213
14.	Managing Objects with Data Dictionary Views	214
Setup	214
Page 540	226
Page 541	226
Page 542	227
Page 543	227
Page 544	227
Page 545	228
Page 546	228
Page 547	228
Page 548	229
Page 549	229
15.	Manipulating Large Data Sets	230
Setup	230
Page 561	247
Page 562	247
Page 563	248
Page 564	248
Page 565	249
Page 566	249
Page 572	249
Page 572	250
Page 575	250
Page 576	251
Page 577	252
Page 578	253
Page 579	253
Page 581	254
Page 582	255
Page 584	255
Page 586	256
Page 589	256
Page 590	257
Page 591	257
Page 593	257
Page 595	258
Page 596	258
Page 597	258
Page 598	259
16.	Hierarchical Retrieval	260
Setup	260
Page 617	260
Page 619	261
Page 621	261
Page 622	261
Page 623	261
Page 624	262
Page 625	262
Page 626	262
Page 627	263
17.	Regular Expression Support	264
Setup	264
Page 645	266
Page 646	266
Page 647	266
Page 648	266
Page 649	267
Page 650	267
Page 651	267
Page 652	268
Page 653	268
Page 654	268
Page 655	269
Page 656	269
Page 657	269
Page 658	270
Page 659	270
Page 661	270
18.	Controlling User Access	271
Setup	271
Page 678	273
Page 679	273
Page 680	273
Page 682	274
Page 683	274
Page 685	274
Page 687	275
Page 688	275
Page 689	276
Page 690	276
Page 692	276
Page 693	277
Page 694	277
Page 695	277
Page 697	278




1. Introduction to SQL

Setup

If you are starting Chapter 1 for the first time, then log into a DBA-qualified Oracle schema and issue the following two statements.
CREATE USER CODD IDENTIFIED BY EF;
GRANT DBA TO CODD;

Note: if you have already issue the above statements earlier, you must first drop the user account, as follows:
DROP USER CODD CASCADE;

Then go back and issue the first two SQL statements to CREATE and GRANT your schema.
Finally, log into the newly created account:
CONNECT CODD/EF

You are ready to begin.

Page 19

CREATE TABLE SHIPS
(  SHIP_ID              NUMBER
 , SHIP_NAME            VARCHAR2(20)
 , CAPACITY             NUMBER
 , LENGTH               NUMBER 
);

INSERT INTO SHIPS 
(  SHIP_ID
 , SHIP_NAME
 , CAPACITY
 , LENGTH
)
VALUES 
(  1
  ,'Codd Crystal'
  , 2052
  , 855
);

SELECT SHIP_NAME
     , CAPACITY
     , LENGTH
FROM   SHIPS
;



2. Using DDL Statements to Create and Manage Table

Setup

If you are continuing from Chapter 1 into Chapter 2, no setup is required.
If you are starting with Chapter 2, perform the Chapter 1 setup.

Page 50

CREATE TABLE work_schedule
  (  work_schedule_id  NUMBER
   , start_date        DATE
   , end_date          DATE
  );

Page 54

CREATE TABLE ports
  (  port_id   NUMBER
   , port_name VARCHAR2(20)
  );

SELECT * 
FROM   ports
;

SELECT * 
FROM   PORTS
;

CREATE TABLE "ports"
  (  port_id   NUMBER
   , port_name VARCHAR2(20)
  );

SELECT * 
FROM   "ports"
;

Page 55

SELECT * 
FROM   "PORTS"
;

(Author's note:  when I said in the book that the above query would not work, what I meant is that a reference to the table "PORTS" is not the same as a reference to a table called "ports".  To confirm this, try the following:

INSERT INTO "ports" VALUES (1, 'Sydney');

SELECT * FROM "ports";

SELECT * FROM "PORTS";

You'll see that the first SELECT statement returns the newly inserted rows, but the second does not.  The table "ports" is not the same as the table "PORTS".)

SELECT * 
FROM   ports
;

CREATE TABLE "Company Employees"
  (  employee_id  NUMBER
   , name         VARCHAR2(35)
  );

SELECT * 
FROM   "Company Employees"
;

Page 58

CREATE TABLE cruises
(  cruise_id           NUMBER
 , cruise_type_id      NUMBER
 , cruise_name         VARCHAR2(20)
 , captain_id          NUMBER NOT NULL
 , start_date          DATE
 , end_date            DATE
 , status              VARCHAR2(5) DEFAULT 'DOCK'
 , CONSTRAINT cruise_pk PRIMARY KEY (cruise_id) 
);

Page 59

(Author's note:  you'll need to drop the CRUISES table created on Page 58 before running the next script.  To drop it, use this:

DROP TABLE CRUISES;

The above script allow you to run the next script.)

CREATE TABLE cruises
(  cruise_id            NUMBER
 , cruise_type_id       NUMBER
 , cruise_name          VARCHAR2(20)
 , captain_id           NUMBER NOT NULL
 , start_date           DATE
 , end_date             DATE
 , status               VARCHAR2(5) DEFAULT 'DOCK'
 , CONSTRAINT cruise_pk PRIMARY KEY (cruise_id) 
);

DESC cruises

Page 66

CREATE TABLE CRUISE_NOTES
(  CRUISE_NOTES_ID NUMBER
 , CRUISE_NOTES    CLOB
);

Page 67

CREATE TABLE positions
(  position_id          NUMBER
 , position             VARCHAR2(20)
 , exempt               CHAR(1)
 , CONSTRAINT  positions_pk PRIMARY KEY (position_id)
);

(Author's note:  you'll need to drop the PORTS table created on Page 54 before running the next script.  To drop it, use this:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID     NUMBER PRIMARY KEY
 , PORT_NAME   VARCHAR2(20)
);

Page 68

(Author's note:  if you've been running the scripts prior to this one, you may need to first drop the PORTS table created on Page 67 before running the next script.  To drop it, use this:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID   NUMBER CONSTRAINT PORT_ID_PK PRIMARY KEY
 , PORT_NAME VARCHAR2(20)
);

CREATE TABLE VENDORS
(  VENDOR_ID   NUMBER
 , VENDOR_NAME VARCHAR2(20)
 , STATUS      NUMBER(1) NOT NULL
 , CATEGORY    VARCHAR2(5)
);

(Author's note:  to test the next script, be sure to DROP the vendors table created in the prior script:

DROP TABLE VENDORS;

The above script allow you to run the next script.)

CREATE TABLE VENDORS
(  VENDOR_ID   NUMBER
 , VENDOR_NAME VARCHAR2(20)
 , STATUS      NUMBER(1) CONSTRAINT STATUS_NN NOT NULL
 , CATEGORY    VARCHAR2(5)
);

(Author's note:  to test the next script, be sure to DROP the vendors table created in the prior script:

DROP TABLE VENDORS;

The above script allow you to run the next script.)

CREATE TABLE VENDORS
(  VENDOR_ID   NUMBER PRIMARY KEY
 , VENDOR_NAME VARCHAR2(20)
 , STATUS      NUMBER(1) CONSTRAINT STATUS_NN NOT NULL
 , CATEGORY    VARCHAR2(5)
);

Page 69

(Author's note:  you may need to first drop the PORTS table created earlier before running the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , PRIMARY KEY (PORT_ID) 
);

(Author's note:  you may need to first drop the PORTS table created earlier before running the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , CONSTRAINT PORT_ID_PK PRIMARY KEY (PORT_ID) 
);

(Author's note:  you may need to first drop the PORTS table created earlier before running the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
);

ALTER    TABLE PORTS
  MODIFY PORT_ID PRIMARY KEY
;

Page 70

(Author's note:  you may need to first drop the PORTS table created earlier before running the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID   NUMBER PRIMARY KEY
 , PORT_NAME VARCHAR2(20)
);

(Author's note:  Here's a setup for the next script:

ALTER TABLE PORTS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER TABLE PORTS
  MODIFY PORT_ID CONSTRAINT PORT_ID_PK PRIMARY KEY;

(Author's note:  Here's a setup for the next script:

ALTER TABLE PORTS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER TABLE PORTS
  ADD PRIMARY KEY (PORT_ID)
;

(Author's note:  Here's a setup for the next script:

ALTER TABLE PORTS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER TABLE PORTS
  ADD CONSTRAINT PORT_ID_PK PRIMARY KEY (PORT_ID)
;

(Author's note:  Here's a setup for the next script:

DROP TABLE PORTS;

The above script allow you to run the next script, which, as specified in the book, is an invalid script and will trigger an error message.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , NOT NULL  (PORT_ID) 
);

(Author's note:  Since the last script resulted in a failed attempt to create a PORTS table, there shouldn't be one.  However, in case you tried to fix it and created the PORTS table, you'll now have to drop it for the next statement to perform as intended:

DROP TABLE PORTS;

Remember, the next script is specified in the book as an invalid script and will trigger an error message.  See the book for more information.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , CONSTRAINT PORT_ID_NN NOT NULL (PORT_ID) 
);

Page 71

(Author's note:  Once again, you shouldn't need this, but here it is just in case:

DROP TABLE PORTS;

You're ready to run the next script.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , CONSTRAINT PORT_ID_UN UNIQUE (PORT_ID) 
);

(Author's note:  Here's a setup for the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , CONSTRAINT PORT_ID_PK PRIMARY KEY (PORT_ID) 
);

(Author's note:  The next statement is an invalid script and will trigger an error message.  See the book for more information.)

ALTER TABLE PORTS
  ADD NOT NULL (PORT_NAME)
;

(Author's note:  The next statement is an invalid script and will trigger an error message.  See the book for more information.)

ALTER TABLE PORTS
  ADD CONSTRAINT PORT_NAME_NN NOT NULL (PORT_NAME)
;

(Authors note:  We're back to scripts that will execute correctly.)

ALTER    TABLE PORTS
  MODIFY PORT_NAME NOT NULL
;

(Author's note:  Here's a setup for the next script:

DROP TABLE PORTS;
CREATE TABLE PORTS
(  PORT_ID    NUMBER
 , PORT_NAME  VARCHAR2(20)
 , CONSTRAINT PORT_ID_PK PRIMARY KEY (PORT_ID) 
);

The above script allow you to run the next script.)

ALTER    TABLE PORTS
  MODIFY PORT_NAME CONSTRAINT PORT_NAME_NN NOT NULL
;

Page 72

CREATE TABLE CUSTOMERS
(  FIRST_NAME  VARCHAR2(20)
 , MIDDLE_NAME VARCHAR2(20)
 , LAST_NAME   VARCHAR2(30)
);

INSERT INTO CUSTOMERS 
(  FIRST_NAME
 , LAST_NAME
) 
VALUES 
(  'Angelina'
 , 'Ellison')
;

Page 74

CREATE TABLE employees
(  employee_id NUMBER
 , ship_id     NUMBER
 , first_name  VARCHAR2(20)
 , last_name   VARCHAR2(30)
 , position_id NUMBER
 , CONSTRAINT employees_pk PRIMARY KEY (employee_id)
);

Page 75

CREATE TABLE HelpDesk
(  HD_Category  NUMBER
 , HD_Year      NUMBER
 , HD_Ticket_No NUMBER
 , HD_Title     VARCHAR2(30)
 , CONSTRAINT HelpDesk_PK PRIMARY KEY (HD_Category
                                     , HD_Year
                                     , HD_Ticket_No)
);

Page 77

(Author's note:  Here's a setup for the next script:

DROP TABLE PORTS;

The above script allow you to run the next script.)

CREATE TABLE PORTS
(  PORT_ID NUMBER
 , PORT_NAME VARCHAR2(20)
 , COUNTRY VARCHAR2(40)
 , CAPACITY NUMBER
 , CONSTRAINT PORT_PK PRIMARY KEY (PORT_ID)
);

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIPS;

The above script allow you to run the next script.)

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , SHIP_NAME VARCHAR2(20)
 , HOME_PORT_ID NUMBER
 , CONSTRAINT SHIPS_PORTS_FK FOREIGN KEY (HOME_PORT_ID)
                             REFERENCES PORTS (PORT_ID)
);

Page 78

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIPS;

The above script allow you to run the next script.)

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , SHIP_NAME VARCHAR2(20)
 , HOME_PORT_ID NUMBER NOT NULL
 , CONSTRAINT SHIPS_PORTS_FK FOREIGN KEY (HOME_PORT_ID)
                             REFERENCES PORTS (PORT_ID)
);

Page 79

(Author's note:  Here's a setup for the next script:

DROP TABLE VENDORS;

The above script allow you to run the next script.)

CREATE TABLE VENDORS
(  VENDOR_ID NUMBER
 , VENDOR_NAME VARCHAR2(20)
 , STATUS NUMBER(1) CHECK (STATUS IN (4,5))
 , CATEGORY VARCHAR2(5)
);


(Author's note:  Here's a setup for the next script:

DROP TABLE VENDORS;

The above script allow you to run the next script.)

CREATE TABLE VENDORS
(  VENDOR_ID NUMBER CONSTRAINT VENDOR_ID_PK PRIMARY KEY
 , VENDOR_NAME VARCHAR2(20) NOT NULL
 , STATUS NUMBER(1) CONSTRAINT STATUS_NN NOT NULL
 , CATEGORY VARCHAR2(20)
 , CONSTRAINT STATUS_CK CHECK (STATUS IN (4, 5))
 , CONSTRAINT CATEGORY_CK CHECK
             (CATEGORY IN ('Active','Suspended','Inactive'))
);



3. Manipulating Data

Setup

Perform the Chapter 1 setup.  Next, execute the following:
CREATE TABLE cruises
(  cruise_id            NUMBER
 , cruise_type_id       NUMBER
 , cruise_name          VARCHAR2(20)
 , captain_id           NUMBER NOT NULL
 , start_date           DATE
 , end_date             DATE
 , status               VARCHAR2(5) DEFAULT 'DOCK'
 , CONSTRAINT cruise_pk PRIMARY KEY (cruise_id) 
);

You are ready to begin.

Page 99

INSERT INTO CRUISES
(  CRUISE_ID
 , CRUISE_TYPE_ID
 , CRUISE_NAME
 , CAPTAIN_ID
 , START_DATE
 , END_DATE
 , STATUS
)
VALUES
(  1
 , 1
 , 'Day At Sea'
 , 101
 , '02-JAN-10'
 , '09-JAN-10'
 , 'Sched'
);

DESC CRUISES

Page 101

(Author's note:  Here's a setup for the next script:

DELETE FROM CRUISES;

The above script allow you to run the next script.)

INSERT INTO CRUISES
VALUES
(  1
 , 1
 , 'Day At Sea'
 , 101
 , '02-JAN-10'
 , '09-JAN-10'
 , 'Sched'
);

Page 102

(Author's note:  Here's a setup for the next script:

CREATE TABLE TEST_SCORES
(  TEST_SCORE_ID NUMBER
 , SCORE         NUMBER
);

The above script allow you to run the next script.)

DESC TEST_SCORES

INSERT INTO TEST_SCORES VALUES (100,85);

(Author's note:  Here's a setup for the next script:

	DROP TABLE TEST_SCORES;

CREATE TABLE TEST_SCORES
(  SCORE         NUMBER 
,  TEST_SCORE_ID NUMBER
);

The above script allow you to run the next script.)

DESC TEST_SCORES

INSERT INTO TEST_SCORES VALUES (100,85);

Page 103

INSERT INTO CRUISES
(  CRUISE_ID
 , CRUISE_NAME
 , STATUS
 , CAPTAIN_ID
 , START_DATE
 , END_DATE
)
VALUES
(  2
 , 'Bermuda and Back'
 , 'Done'
 , 101
 , '07-APR-08'
 , '14-APR-08'
);

(Author's note:  Here's a setup for the next script:

DELETE FROM CRUISES;

The above script allow you to run the next script.)

INSERT INTO CRUISES 
(  CRUISE_ID
 , CAPTAIN_ID
)
VALUES 
(  2
 , '101'
);

Page 104

(Author's note:  Here's a setup for the next script:

DROP TABLE CRUISES;

The above script allow you to run the next script.)

CREATE TABLE CRUISES
(  CRUISE_ID NUMBER
 , CRUISE_NAME VARCHAR2(30)
 , START_DATE DATE
 , END_DATE DATE
 , CONSTRAINT CRUISE_ID_PK PRIMARY KEY (CRUISE_ID)
 , CONSTRAINT CRUISE_NAME_CK CHECK
             (CRUISE_NAME IN ('Hawaii','Bahamas','Bermuda',
                              'Mexico','Day at Sea')
             )
);

CREATE SEQUENCE SEQ_CRUISE_ID;

Page 105

INSERT INTO CRUISES
(  CRUISE_ID
 , CRUISE_NAME
)
VALUES
(  SEQ_CRUISE_ID.NEXTVAL
 , 'Hawaii'
);

(Author's note:  The next statement is an invalid script and will trigger an error message.  See the book for more information.)

INSERT INTO CRUISES
(  CRUISE_ID
 , CRUISE_NAME
)
VALUES
(  SEQ_CRUISE_ID.NEXTVAL
 , 'Hawaii and Back'
);

Page 106

UPDATE CRUISES
   SET CRUISE_NAME = 'Bahamas'
     , START_DATE  = '01-DEC-11'
WHERE  CRUISE_ID = 1;

Page 108

(Author's note:  Here's a setup for the next script:

CREATE TABLE COMPENSATION
( COMPENSATION_ID NUMBER
, EMPLOYEE_NUMBER NUMBER
, SALARY NUMBER
, LAST_CHANGED_DATE DATE
);

INSERT INTO COMPENSATION VALUES (1, 83, 50000, SYSDATE);

The above script allow you to run the next script.)

UPDATE COMPENSATION
   SET SALARY = SALARY * 1.03
     , LAST_CHANGED_DATE = SYSDATE
WHERE  EMPLOYEE_NUMBER = 83;

Page 109

CREATE TABLE PROJECTS
( PROJECT_ID NUMBER PRIMARY KEY
, PROJECT_NAME VARCHAR2(40)
, COST NUMBER
, CONSTRAINT CK_COST CHECK (COST < 1000000)
);

INSERT INTO PROJECTS 
(  PROJECT_ID
 , PROJECT_NAME
 , COST
)
VALUES 
(  1
  ,'Hull Cleaning'
  , 340000
);

INSERT INTO PROJECTS 
(  PROJECT_ID
 , PROJECT_NAME
 , COST)
VALUES 
(  2
 , 'Deck Resurfacing'
 , 964000
);

INSERT INTO PROJECTS 
(  PROJECT_ID
 , PROJECT_NAME
 , COST
)
VALUES 
(  3
 , 'Lifeboat Inspection'
 , 12000
);

(Author's note:  The next statement is an invalid script and will trigger an error message.  See the book for more information.)

UPDATE PROJECTS
  SET COST = COST * 1.20;

UPDATE PROJECTS 
  SET COST = COST * 1.20
WHERE COST*1.20 < 1000000;

Page 111

(Author's note:  Here's a setup for the next script:

CREATE TABLE PROJECT_LISTING
( PROJECT_LISTING_ID NUMBER
, CONSTRUCTION_ID NUMBER
, PROJECT_NAME VARCHAR2(30)
, PROJECT_STARTED DATE
);

INSERT INTO PROJECT_LISTING VALUES (1, 12, 'Sample', SYSDATE);

COMMIT;

The above script allow you to run the next script.)

DELETE FROM PROJECT_LISTING
WHERE  CONSTRUCTION_ID = 12
;

(Author's note:  Here's a setup for the next script:

INSERT INTO PROJECT_LISTING VALUES (1, 12, 'Sample', SYSDATE);

COMMIT;

The above script allow you to run the next script.)

DELETE PROJECT_LISTING
WHERE  CONSTRUCTION_ID = 12
;

Page 113

COMMIT;

COMMIT WORK;

(Author's note:  Here's a setup for the next script:

CREATE TABLE POSITIONS
(  POSITION_ID          NUMBER
 , POSITION_NAME        VARCHAR2(20)
 , EXEMPT               CHAR(1)
 , CONSTRAINT  POSITIONS_PK PRIMARY KEY (POSITION_ID)
);

The above script allow you to run the next script.)

INSERT INTO POSITIONS 
(  POSITION_ID
 , POSITION_NAME
)
VALUES 
(  100
 , 'Manager'
);

SELECT POSITION_ID
     , POSITION_NAME
FROM   POSITIONS
;

COMMIT;

Page 114

(Author's note:  Here's a setup for the next script:

CREATE TABLE PORTS
(  PORT_ID NUMBER
 , PORT_NAME VARCHAR2(20)
 , COUNTRY VARCHAR2(40)
 , CAPACITY NUMBER
 , CONSTRAINT PORT_PK PRIMARY KEY (PORT_ID)
);

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , SHIP_NAME VARCHAR2(20)
 , HOME_PORT_ID NUMBER
);

	INSERT INTO PORTS VALUES (1, 'Seattle', 'USA', 999);

	INSERT INTO PORTS VALUES (2, 'Baltimore', 'USA', 999);

	INSERT INTO PORTS VALUES (12, 'Miami', 'USA', 999);

COMMIT;

INSERT INTO SHIPS VALUES 
(1, 'Codd Crystal', NULL);

INSERT INTO SHIPS VALUES 
(2, 'Codd Elegance', NULL);

INSERT INTO SHIPS VALUES 
(3, 'Codd Champion', NULL);

INSERT INTO SHIPS VALUES 
(4, 'Codd Victorious', NULL);

INSERT INTO SHIPS VALUES (31, 'Constellation', 2);

COMMIT;

The above script allow you to run the next script.)

UPDATE SHIPS 
   SET HOME_PORT_ID = 12 
 WHERE SHIP_ID      = 31
;

ALTER TABLE PORTS 
  ADD AUTHORITY_NOTE VARCHAR2(75)
;

UPDATE SHIPS 
   SET HOME_PORT_ID = 12 
 WHERE SHIP_ID = 31
;

COMMIT;

Page 117

COMMIT;

INSERT INTO PORTS 
(  PORT_ID
 , PORT_NAME
 ) VALUES (
   701
 , 'Chicago'
);

DELETE FROM SHIPS;

ROLLBACK;


Page 118

(Author's note:  Here's a setup for the next script:

DELETE FROM SHIPS WHERE SHIP_ID = 31;

The above script allow you to run the next script.)

COMMIT;

SELECT SHIP_ID, SHIP_NAME FROM SHIPS;

UPDATE SHIPS SET SHIP_NAME = 'WHOOPS';

SELECT SHIP_ID, SHIP_NAME FROM SHIPS;

ROLLBACK;

SELECT SHIP_ID, SHIP_NAME FROM SHIPS;

Page 119

(Author's note:  Here's a setup for the next script:

INSERT INTO SHIPS VALUES (12, 'Spitfire', NULL);

COMMIT;

The above script allow you to run the next script.)

COMMIT;

UPDATE SHIPS 
   SET HOME_PORT_ID = 21 
 WHERE SHIP_ID      = 12;

SAVEPOINT SP_1;

UPDATE SHIPS 
   SET HOME_PORT_ID = 22 
 WHERE SHIP_ID      = 12;

ROLLBACK WORK TO SP_1;

COMMIT;

(Author's note:  To see the results, you can use this statement:

SELECT * FROM SHIPS;

The above SELECT statement shows the results of the ROLLBACK WORK TO SP_1 statement.)

COMMIT;

UPDATE SHIPS 
   SET HOME_PORT_ID = 21 
 WHERE SHIP_ID      = 12;

SAVEPOINT MARK_01;

UPDATE SHIPS 
   SET HOME_PORT_ID = 22 
 WHERE SHIP_ID      = 12;

SAVEPOINT MARK_02;

UPDATE SHIPS 
   SET HOME_PORT_ID = 23 
 WHERE SHIP_ID      = 12;

ROLLBACK TO MARK_02;

COMMIT;

(Author's note:  To see the results, you can use this statement:

SELECT * FROM SHIPS;

The above SELECT statement shows the results of the ROLLBACK TO MARK_02 statement.)

Page 120

(Author's note:  The next series of statements result in an error message.  See the book for more information.)

COMMIT;

UPDATE SHIPS 
   SET HOME_PORT_ID = 21 
 WHERE SHIP_ID      = 12;

SAVEPOINT MARK_01;

COMMIT;

ROLLBACK TO MARK_01;

Page 121

ROLLBACK;

Page 122

SAVEPOINT scn_01;

ROLLBACK WORK TO scn_01;






4. Retrieving Data Using the SQL SELECT Statement

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE EMP_COMPENSATION
REM

CREATE TABLE EMP_COMPENSATION
(  EMP_COMPENSATION_ID NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER
 , BASE_PAY            NUMBER
 , YEARS_OF_SERVICE    NUMBER
);

REM
REM CREATE TABLE PAY_HISTORY
REM

CREATE TABLE PAY_HISTORY
(  PAY_HISTORY_ID      NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER(10,2)
 , START_DATE          DATE
 , END_DATE            DATE
 , CONSTRAINT          PK_PAY_HISTORY_ID 
                       PRIMARY KEY (PAY_HISTORY_ID)
);

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE SHIPS
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);


REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_COMPENSATION_ID
REM

CREATE SEQUENCE SEQ_COMPENSATION_ID;

REM
REM CREATE SEQUENCE SEQ_PAY_HISTORY_ID
REM

CREATE SEQUENCE SEQ_PAY_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM INSERT INTO SHIPS …
REM

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Crystal', 2052, 855, 1) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Elegance', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Champion', 2974, 952, 4) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Victorious', 2974, 952, 7) 
;

REM
REM INSERT INTO EMPLOYEES AND PAY_HISTORY …
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 73922
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 47000
 , '04-JUN-01'
 , '12-DEC-07');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 47000
 , '13-JUL-09'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 37450
 , '04-JUN-01'
 , '08-APR-05');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 91379
 , '05-FEB-12'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 45500
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

REM
REM INSERT INTO PORTS …
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Galveston', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Diego', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Francisco', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Los Angeles', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Honolulu', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'St. Thomas', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Juan', 'USA', 3)
;

REM
REM INSERT INTO EMP_COMPENSATION …
REM

INSERT INTO EMP_COMPENSATION VALUES (SEQ_COMPENSATION_ID.NEXTVAL, 1, 95000, 75000, 3);

COMMIT;

You are ready to begin.
Page 139

SELECT   SHIP_ID
       , SHIP_NAME
       , CAPACITY
FROM     SHIPS
ORDER    BY SHIP_NAME
;

Page 141

SELECT   1
FROM     SHIPS
;

SELECT   SHIP_NAME
FROM     SHIPS
;

Page 142

SELECT   SHIP_ID
       , SHIP_NAME
FROM     SHIPS
;

Page 143

SELECT   SHIP_NAME
       , SHIP_ID
FROM     SHIPS
;

Page 144

SELECT ROWNUM, LAST_NAME, FIRST_NAME
FROM EMPLOYEES;

SELECT ROWNUM, LAST_NAME, FIRST_NAME
FROM EMPLOYEES
ORDER BY LAST_NAME;

Page 145

SELECT   DISTINCT LAST_NAME
FROM     EMPLOYEES
;

SELECT   DISTINCT LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
;

Page 146

SELECT   *
FROM     PORTS
;

SELECT   PORT_ID
       , PORT_NAME
       , COUNTRY
       , CAPACITY
FROM     PORTS
;

Page 147

SELECT   EMPLOYEE_ID
       , SALARY
       , SALARY*1.05
FROM     PAY_HISTORY
WHERE    END_DATE IS NULL
ORDER BY EMPLOYEE_ID
;

Page 149

SELECT   SALARY * (BASE_PAY * (1.03 * YEARS_OF_SERVICE)) / 12
FROM     EMP_COMPENSATION
;

Page 150

SELECT   PORT_NAME
       , UPPER(PORT_NAME)
FROM     PORTS
;

Page 153

(Author's note:  Here's a setup for the next script:

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Nassau', 'Bahamas', 7)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Grand Cayman', 'UK', 3)
;

COMMIT;

The above script allow you to run the next script.)

SELECT PORT_NAME, CAPACITY
FROM PORTS;

SELECT * FROM PORTS WHERE CAPACITY <= 4;

Page 154

SELECT PORTS.PORT_NAME
    ,  SHIPS.SHIP_NAME
FROM   PORTS JOIN SHIPS
ON    (PORTS.PORT_ID = SHIPS.HOME_PORT_ID);





5. Restricting and Sorting Data

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE ADDRESSES
REM

CREATE TABLE ADDRESSES
(
   ADDRESS_ID          NUMBER
 , EMPLOYEE_ID         NUMBER
 , STREET_ADDRESS      VARCHAR2(40)
 , STREET_ADDRESS2     VARCHAR2(40)
 , CITY                VARCHAR2(30)
 , STATE               VARCHAR2(2)
 , ZIP                 VARCHAR2(5)
 , ZIP_PLUS            VARCHAR2(4)
 , COUNTRY             VARCHAR2(20)
 , CONTACT_EMAIL       VARCHAR2(80)
 , CONSTRAINT          PK_ADDRESS_ID
                       PRIMARY KEY (ADDRESS_ID)
);

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE PROJECTS
REM

CREATE TABLE PROJECTS
(  PROJECT_ID          NUMBER
 , SHIP_ID             NUMBER(7)
 , PURPOSE             VARCHAR2(30)
 , PROJECT_NAME        VARCHAR2(40)
 , PROJECT_COST        NUMBER
 , DAYS                NUMBER
 , CONSTRAINT          PK_PROJECT_ID
                       PRIMARY KEY (PROJECT_ID)
 , CONSTRAINT          CK_PROJECT_COST 
                       CHECK (PROJECT_COST < 1000000)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE WORK_HISTORY
REM

CREATE TABLE WORK_HISTORY
(  WORK_HISTORY_ID    NUMBER
 , EMPLOYEE_ID         NUMBER
 , START_DATE          DATE
 , END_DATE            DATE
 , SHIP_ID             NUMBER(7)
 , STATUS              VARCHAR2(10)
 , CONSTRAINT          PK_WORK_HISTORY 
                       PRIMARY KEY (WORK_HISTORY_ID)
);

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_ADDRESS_ID
REM

CREATE SEQUENCE SEQ_ADDRESS_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM CREATE SEQUENCE SEQ_PROJECT_ID
REM

CREATE SEQUENCE SEQ_PROJECT_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_WORK_HISTORY_ID
REM

CREATE SEQUENCE SEQ_WORK_HISTORY_ID;

REM
REM INSERT INTO EMPLOYEES
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);
INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO PROJECTS
REM

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES                 
  (  SEQ_PROJECT_ID.NEXTVAL
                , 2      , 'Maintenance', 'Deck Resurfacing'       , 964000      , 10);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 3      ,'Maintenance' , 'Lifeboat Inspection'    , 12000       , 3);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Clean Pools'            , 37000       , 5);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Replace lobby carpeting', 137000      , 5);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Major Engine Service'   , 837000      , 15);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Remodel Dining Room A'  , 950000      , 45);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Remodel Dining Room B'  , 925000      , 37);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Lifeboat Inspection'    , 12000       , 3);

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Ocean',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'None' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'None' ,      6,   586, 193);
  
REM
REM INSERT INTO WORK_HISTORY
REM

INSERT INTO WORK_HISTORY 
  (  WORK_HISTORY_ID, EMPLOYEE_ID
   , START_DATE, END_DATE, SHIP_ID, STATUS)
  VALUES 
  (  10, 3, '23-JUN-01', '09-FEB-08', 1, 'Pending');

INSERT INTO WORK_HISTORY 
  (  WORK_HISTORY_ID, EMPLOYEE_ID
   , START_DATE, END_DATE, SHIP_ID, STATUS)
  VALUES 
  (  11, 4, '23-JUN-01', '05-DEC-06', 4, 'Active');

INSERT INTO WORK_HISTORY 
  (  WORK_HISTORY_ID, EMPLOYEE_ID
   , START_DATE, END_DATE, SHIP_ID, STATUS)
  VALUES 
  (  12, 7, '23-JUN-01', '28-SEP-02',  3, 'Pending');

REM
REM INSERT INTO ADDRESSES
REM

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 1
   , '350 Oracle Parkway'
   , NULL
   , 'Redwood City'
   , 'CA'
   , '94065'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '1600 Amphitheatre Parkway'
   , NULL
   , 'Mountain View'
   , 'CA'
   , '94043'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 3
   , '1 Dell Way'
   , NULL
   , 'Round Rock'
   , 'TX'
   , '78682'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 4
   , '29 E Ohio St'
   , NULL
   , 'Chicago'
   , 'IL'
   , '60611'
   , '2707'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 5
   , '5788 Roswell Rd NE'
   , NULL
   , 'Atlanta'
   , 'GA'
   , '30328'
   , '4904'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '10103 100 St NW'
   , NULL
   , 'Edmonton'
   , 'AB'
   , 'T5J'
   , '0N8'
   , 'Canada'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 6
   , '1221 Avenue of the Americas'
   , NULL
   , 'New York'
   , 'NY'
   , '10020'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '239 Baker Street'
   , NULL
   , 'London'
   , NULL
   , 'NW1'
   , '6X3'
   , 'UK'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '1 rue des Carrieres'
   , NULL
   , 'Quebec City'
   , 'QC'
   , 'G1R'
   , '4P5'
   , 'Canada'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 4
   , '2041 S Harbor Blvd'
   , NULL
   , 'Anaheim'
   , 'CA'
   , '92802'
   , '3513'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '600 N Michigan Ave'
   , NULL
   , 'Chicago'
   , 'IL'
   , '60611'
   , '3113'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 6
   , '1515 Sheridan Rd'
   , NULL
   , 'Wilmette'
   , 'IL'
   , '60091'
   , NULL
   , 'USA'
   , NULL
   );

REM
REM INSERT INTO PORTS
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Galveston', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Diego', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Francisco', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Los Angeles', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Honolulu', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'St. Thomas', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Juan', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Nassau', 'Bahamas', 7)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Grand Cayman', 'UK', 3)
;

COMMIT;

You are ready to begin.

Page 171

SELECT   EMPLOYEE_ID
FROM     WORK_HISTORY
WHERE    SHIP_ID = 3
;

SELECT   PORT_NAME
       , CAPACITY
FROM     PORTS
WHERE    CAPACITY >= 5
;

Page 174

SELECT   *
FROM     EMPLOYEES
WHERE    LAST_NAME = 'Smith'
;

SELECT   *
FROM     EMPLOYEES
WHERE    LAST_NAME = 'SMITH'
;

Page 175

SELECT   PORT_NAME
FROM     PORTS
WHERE    PORT_NAME LIKE 'San ____'
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    PORT_NAME LIKE 'San%'
;

Page 176

SELECT   PORT_NAME
FROM     PORTS
WHERE    PORT_NAME LIKE '_o%'
;

SELECT   PORT_NAME
FROM     PORTS
WHERE   'G_and%' LIKE PORT_NAME
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    PORT_NAME LIKE 'G_and%'
;

Page 177

SELECT   EMPLOYEE_ID
FROM     WORK_HISTORY
WHERE    SHIP_ID = 3
         AND
         STATUS = 'Pending'
;

Page 179

SELECT   EMPLOYEE_ID
FROM     WORK_HISTORY
WHERE    SHIP_ID = 3
         AND
         NOT STATUS = 'Pending'
;

SELECT   EMPLOYEE_ID
FROM     WORK_HISTORY
WHERE    NOT SHIP_ID = 3
;

Page 180

SELECT   ROOM_NUMBER
FROM     SHIP_CABINS
WHERE    STYLE = 'Suite'
         OR 
         STYLE = 'Stateroom'
         AND 
         WINDOW = 'Ocean'
;

Page 181

SELECT   ROOM_NUMBER
FROM     SHIP_CABINS
WHERE    (STYLE = 'Suite'
         OR 
         STYLE = 'Stateroom')
         AND 
         WINDOW = 'Ocean'
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    COUNTRY = 'UK' 
         OR 
         COUNTRY = 'USA' 
         OR 
         COUNTRY = 'Bahamas'
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    COUNTRY IN ('UK', 'USA', 'Bahamas')
;

Page 182

SELECT   PORT_NAME
FROM     PORTS
WHERE    COUNTRY NOT IN ('UK', 'USA', 'Bahamas')
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY BETWEEN 3 AND 4
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY >= 3
         AND 
         CAPACITY <= 4
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY NOT BETWEEN 3 AND 4
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    NOT CAPACITY BETWEEN 3 AND 4
;

Page 183

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY = NULL
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY IS NULL
;

SELECT   PORT_NAME
FROM     PORTS
WHERE    CAPACITY IS NOT NULL
;

Page 186

SELECT   ADDRESS_ID
       , STREET_ADDRESS
       , CITY
       , STATE
       , COUNTRY
FROM     ADDRESSES
ORDER BY STATE
;

SELECT   ADDRESS_ID
       , STREET_ADDRESS
       , CITY
       , STATE
       , COUNTRY
FROM     ADDRESSES
ORDER BY STATE
       , CITY
;

SELECT   STATE
       , CITY
       , ADDRESS_ID
       , STREET_ADDRESS
       , COUNTRY
FROM     ADDRESSES
ORDER BY STATE
       , CITY
;

SELECT   ADDRESS_ID
       , STREET_ADDRESS
       , COUNTRY
FROM     ADDRESSES
ORDER BY STATE
       , CITY
;

Page 188

SELECT   SHIP_ID
       , PROJECT_COST
       , PROJECT_NAME
       , DAYS
FROM     PROJECTS
ORDER BY SHIP_ID ASC
;

SELECT   SHIP_ID
       , PROJECT_COST
       , PROJECT_NAME
       , DAYS
FROM     PROJECTS
ORDER BY SHIP_ID ASC
       , PROJECT_COST DESC
;

Page 190

SELECT   *
FROM     PROJECTS
ORDER BY PROJECT_COST / DAYS
;

SELECT   PROJECT_ID
       , PROJECT_NAME
       , PROJECT_COST
       , DAYS
       , PROJECT_COST/DAYS
FROM     PROJECTS
ORDER BY PROJECT_COST/DAYS
;

SELECT   PROJECT_ID
       , PROJECT_NAME
       , PROJECT_COST
       , DAYS
       , PROJECT_COST/DAYS
FROM     PROJECTS
ORDER BY PROJECT_COST/DAYS
;

Page 191

SELECT   PROJECT_ID
       , PROJECT_NAME
       , PROJECT_COST
       , DAYS
       , PROJECT_COST/DAYS AS PER_DAY_COST
FROM     PROJECTS
ORDER BY PER_DAY_COST
;

SELECT   PROJECT_ID
       , PROJECT_NAME
       , PROJECT_COST 
       , DAYS
       , PROJECT_COST/DAYS "Cost Per Day"
FROM     PROJECTS
ORDER BY "Cost Per Day"
;

Page 192

SELECT   PROJECT_ID
       , PROJECT_NAME
       , PROJECT_COST
       , DAYS
       , PROJECT_COST/DAYS FROM PROJECTS
ORDER BY 5
;

(Author's note:  The next statement produces an error message.  See the book for more information.)

SELECT   PROJECT_ID
       , PROJECT_COST/DAYS
FROM     PROJECTS
ORDER BY 5
;

Page 193

SELECT   SHIP_ID
       , PROJECT_COST
       , PROJECT_NAME "The Project"
       , DAYS
FROM     PROJECTS
ORDER BY SHIP_ID DESC
       , "The Project"
       , 2
;




6. Using Single-Row Functions to Customize Output

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE SHIPS
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE ADDRESSES
REM

CREATE TABLE ADDRESSES
(
   ADDRESS_ID          NUMBER
 , EMPLOYEE_ID         NUMBER
 , STREET_ADDRESS      VARCHAR2(40)
 , STREET_ADDRESS2     VARCHAR2(40)
 , CITY                VARCHAR2(30)
 , STATE               VARCHAR2(2)
 , ZIP                 VARCHAR2(5)
 , ZIP_PLUS            VARCHAR2(4)
 , COUNTRY             VARCHAR2(20)
 , CONTACT_EMAIL       VARCHAR2(80)
 , CONSTRAINT          PK_ADDRESS_ID
                       PRIMARY KEY (ADDRESS_ID)
);

REM
REM CREATE TABLE ONLINE_SUBSCRIBERS
REM

CREATE TABLE ONLINE_SUBSCRIBERS
(
   ONLINE_SUBSCRIBER_ID NUMBER
 , SUB_DATE             DATE
 , EMAIL                VARCHAR2(120)
 , FIRSTNAME            VARCHAR2(20)
 , LASTNAME             VARCHAR2(30)
 , COMPANY              VARCHAR2(30)
 , CONSTRAINT           PK_ONLINE_SUBSCRIBER_ID
                        PRIMARY KEY (ONLINE_SUBSCRIBER_ID)
);

REM
REM CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID
REM

CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID;

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_ADDRESS_ID
REM

CREATE SEQUENCE SEQ_ADDRESS_ID;

REM
REM INSERT INTO EMPLOYEES
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Fred','McGillicutty'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO SHIPS
REM

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Crystal', 2052, 855, 1) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Elegance', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Champion', 2974, 952, NULL) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Victorious', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Grandeur', 2446, 916, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Prince', 395, 470, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Harmony', 940, 790, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Voyager', 3114, 1020, 2) 
;

REM
REM INSERT INTO ADDRESSES 
REM

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 1
   , '350 Oracle Parkway'
   , NULL
   , 'Redwood City'
   , 'CA'
   , '94065'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 3
   , '1 Dell Way'
   , NULL
   , 'Round Rock'
   , 'TX'
   , '78682'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 4
   , '29 E Ohio St'
   , NULL
   , 'Chicago'
   , 'IL'
   , '60611'
   , '2707'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '10103 100 St NW'
   , NULL
   , 'Edmonton'
   , 'AB'
   , 'T5J'
   , '0N8'
   , 'Canada'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 6
   , '1221 Avenue of the Americas'
   , NULL
   , 'New York'
   , 'NY'
   , '10020'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '239 Baker Street'
   , NULL
   , 'London'
   , NULL
   , 'NW1'
   , '6X3'
   , 'UK'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '1 rue des Carrieres'
   , NULL
   , 'Quebec City'
   , 'QC'
   , 'G1R'
   , '4P5'
   , 'Canada'
   , NULL
   );

REM
REM INSERT INTO ONLINE_SUBSCRIBERS 
REM

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '12-DEC-08'
 , 'pendicott77@kasteelinc.com'
 , 'EDGAR'
 , 'KLINE'
 , 'KLINE AND ASSOCIATES'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '09-APR-09'
 , 'watcher@foursigma.org'
 , 'bill'
 , 'bryant'
 , 'Gold International'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '09-APR-09'
 , 'hardingpal@ckofca.com'
 , 'Ned'
 , 'McLean'
 , 'Harding Company'
); 

REM
REM INSERT INTO SHIP_CABINS  
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Ocean',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'None' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'None' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Ocean',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'None' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'None' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','None',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, 410);

REM
REM INSERT INTO BOOK_CONTENTS 
REM

CREATE TABLE BOOK_CONTENTS
(  BOOK_CONTENT_ID   NUMBER
 , CHAPTER_TITLE     VARCHAR2(30)
 , PAGE_NUMBER       NUMBER(4)
);

REM
REM CREATE SEQUENCE SEQ_BOOK_CONTENT_ID 
REM

CREATE SEQUENCE SEQ_BOOK_CONTENT_ID;

REM
REM INSERT INTO BOOK_CONTENTS
REM

INSERT INTO BOOK_CONTENTS
  (  BOOK_CONTENT_ID   , CHAPTER_TITLE
   , PAGE_NUMBER)
  VALUES
  (  SEQ_BOOK_CONTENT_ID.NEXTVAL
   , 'Introduction'
   , 1);

INSERT INTO BOOK_CONTENTS
  (  BOOK_CONTENT_ID
   , CHAPTER_TITLE
   , PAGE_NUMBER)
  VALUES
  (  SEQ_BOOK_CONTENT_ID.NEXTVAL
   , 'Chapter 1'
   , 5);

INSERT INTO BOOK_CONTENTS
  (  BOOK_CONTENT_ID
   , CHAPTER_TITLE
   , PAGE_NUMBER)
  VALUES
  (  SEQ_BOOK_CONTENT_ID.NEXTVAL
   , 'Chapter 2'
   , 23);

INSERT INTO BOOK_CONTENTS
  (  BOOK_CONTENT_ID
   , CHAPTER_TITLE
   , PAGE_NUMBER)
  VALUES
  (  SEQ_BOOK_CONTENT_ID.NEXTVAL
   , 'Chapter 3'
   , 57);

INSERT INTO BOOK_CONTENTS
  (  BOOK_CONTENT_ID
   , CHAPTER_TITLE
   , PAGE_NUMBER)
  VALUES
  (  SEQ_BOOK_CONTENT_ID.NEXTVAL
   , 'Index'
   , 79);

REM
REM CREATE TABLE SCORES 
REM

CREATE TABLE SCORES(
   SCORE_ID NUMBER
 , TEST_SCORE VARCHAR2(5)
 , UPDATED_TEST_SCORE VARCHAR2(5)
 , CONSTRAINT PK_SCORE_ID PRIMARY KEY (SCORE_ID)
);

REM
REM CREATE SEQUENCE   
REM

CREATE SEQUENCE SEQ_SCORE_ID;

REM
REM INSERT INTO SCORES 
REM

INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,95,95);
INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,55,75);
INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,83,83);

REM
REM CREATE TABLE CALLS
REM

CREATE TABLE CALLS 
(   CALL_ID NUMBER
, CALL_DATE_TZ TIMESTAMP WITH TIME ZONE);

You are ready to begin.

Page 210

SELECT   LASTNAME
       , INITCAP(LASTNAME) 
FROM     ONLINE_SUBSCRIBERS
;

Page 215

SELECT   SYSDATE 
  FROM   DUAL
;

SELECT   EMPLOYEE_ID
FROM     EMPLOYEES
WHERE    UPPER(LAST_NAME) = 'MCGILLICUTTY'
;

Page 216

SELECT   INITCAP('napoleon')
       , INITCAP('RED O''BRIEN')
       , INITCAP('McDonald''s')
FROM     DUAL
;

SELECT   CONCAT('Hello, ', 'world!')
FROM     DUAL
;

Page 217

SELECT   'Hello, ' || 'world!'
FROM     DUAL
;

SELECT   'Hello, ' || 'world!' 
                   || ' Great to ' 
                   || 'see you.'
FROM     DUAL
;

SELECT   FIRST_NAME || ' ' 
                    || LAST_NAME 
                    || ' of ship number ' 
                    || SHIP_ID 
                    || '.'
FROM     EMPLOYEES
WHERE    LAST_NAME = 'West'
;

SELECT   RPAD('Chapter One - I Am Born',40, '.')
FROM     DUAL
;

Page 218

SELECT   RPAD(CHAPTER_TITLE || ' ',30,'.')
         || LPAD(' ' || PAGE_NUMBER,30,'.') 
         "Table of Contents"
FROM     BOOK_CONTENTS
ORDER BY PAGE_NUMBER
;

Page 219

SELECT   RTRIM('Seven thousand--------', '-')
FROM     DUAL
;

SELECT   TRIM(TRAILING '-' FROM 'Seven thousand--------')
FROM     DUAL
;

Page 220

SELECT   LENGTH('Supercalifragilisticexpialidocious')
FROM     DUAL
;

SELECT   INSTR('Mississippi', 'is', 1, 2)
FROM     DUAL
;

Page 221

SELECT   SUBSTR('Name: MARK KENNEDY', 7)
FROM     DUAL
;

Page 222

SELECT   SOUNDEX('Worthington'), SOUNDEX('Worthen')
FROM     DUAL
;

SELECT   EMPLOYEE_ID
       , FIRST_NAME
       , LAST_NAME
FROM     EMPLOYEES
WHERE    SOUNDEX(LAST_NAME) = SOUNDEX('Worthen')
;

Page 223

SELECT   ROUND(12.355143, 2)
       , ROUND(259.99,-1)
FROM    DUAL
;

Page 224

SELECT   TRUNC(12.355143, 2)
       , TRUNC(259.99,-1)
FROM     DUAL
;

SELECT   REMAINDER(9,3)
       , REMAINDER(10,3)
       , REMAINDER(11,3)
FROM     DUAL
;

Page 225

SELECT   MOD(9,3)
       , MOD(10,3)
       , MOD(11,3)
FROM     DUAL
;

SELECT   SYSDATE 
FROM     DUAL
;

Page 226

SELECT   SYSDATE TODAY
       , ROUND(SYSDATE,'MM') ROUNDED_MONTH
       , ROUND(SYSDATE,'RR') ROUNDED_YEAR
FROM     DUAL
;

Page 227

SELECT   SYSDATE TODAY
       , TRUNC(SYSDATE,'MM') TRUNCATED_MONTH
       , TRUNC(SYSDATE,'RR') TRUNCATED_YEAR
FROM     DUAL
;

SELECT   NEXT_DAY('31-MAY-11', 'Saturday')
FROM     DUAL
;

SELECT   LAST_DAY('14-FEB-11')
       , LAST_DAY('20-FEB-12')
FROM     DUAL
;

Page 228

SELECT   ADD_MONTHS('31-JAN-11', 1)
       , ADD_MONTHS('01-NOV-11', 4)
FROM     DUAL
;

Page 229

SELECT   MONTHS_BETWEEN('12-JUN-14', '03-OCT-13')
FROM     DUAL
;

SELECT   NUMTOYMINTERVAL(27, 'MONTH')
FROM     DUAL
;

Page 230

SELECT   NUMTODSINTERVAL(36, 'HOUR')
FROM     DUAL
;

Page 231

SELECT   NVL(NULL, 0)      FIRST_ANSWER
       , 14+NULL-4         SECOND_ANSWER
       , 14+NVL(NULL, 0)-4 THIRD_ANSWER
FROM     DUAL
;

SELECT   SQ_FT + NVL(BALCONY_SQ_FT,0)
FROM     SHIP_CABINS
;

Page 232

SELECT   STATE
       , DECODE(  STATE
                 , 'CA', 'California'
                 , 'IL', 'Illinois'
                 , 'Other') AS DECODED_STATE
FROM     ADDRESSES
;

SELECT   CASE 'option1'
           WHEN 'option1' THEN 'found it'
           WHEN 'option2' THEN 'did not find it'
           END AS "Answer"
FROM     DUAL
;

Page 233

SELECT   SHIP_NAME
       , CAPACITY
       , CASE CAPACITY 
           WHEN 2052 THEN 'MEDIUM' 
           WHEN 2974 THEN 'LARGE' 
           END AS "SIZE"
FROM     SHIPS
WHERE    SHIP_ID <= 4
;

SELECT   TEST_SCORE
       , UPDATED_TEST_SCORE
       , NULLIF(UPDATED_TEST_SCORE,TEST_SCORE) REVISION_ONLY
FROM     SCORES
;

Page 235

(Author's note:  The next statement produces an error message.  See the book for more information.)

INSERT INTO CALLS 
(  CALL_ID
 , CALL_DATE_TZ
)
VALUES 
(  1
 , '24-MAY-12 10:15:30'
);

Page 236

INSERT INTO CALLS 
(  CALL_ID
 , CALL_DATE_TZ
)
VALUES 
(  1
 , TO_TIMESTAMP_TZ('24-MAY-12 10:15:30', 'DD-MON-RR HH24:MI:SS') 
);

Page 237

SELECT   TO_NUMBER('$17,000.23','$999,999.99')
FROM     DUAL
;

SELECT   TO_NUMBER(  '17.000,23'
                   , '999G999D99'
                   , 'nls_numeric_characters='',.'' ')
                   REFORMATTED_NUMBER
FROM     DUAL
;

Page 239

SELECT   TO_CHAR('Hello') 
FROM     DUAL
;

Page 240

SELECT   TO_CHAR(198,'$999.99') 
FROM     DUAL
;

(Author's note:  The next few statements use SYSDATE to product the current date.  Your results will show the current date, and not the date shown in the book.  But everything else should be consistent with the book text.)

SELECT   TO_CHAR(SYSDATE,'DAY, "THE" DD "OF" MONTH, RRRR')
FROM     DUAL
;

SELECT   TO_CHAR(SYSDATE,'FMDAY, "THE" DD "OF" MONTH, RRRR')
FROM     DUAL
;

Page 241

SELECT   TO_CHAR(SYSDATE,'FMDay, "the" Dd "of" Month, RRRR')
FROM     DUAL
;

SELECT   TO_CHAR(SYSDATE,'FMDay, "the" Ddth "of" Month, RRRR')
FROM     DUAL
;

SELECT   TO_CHAR(SYSDATE,'HH24:MI:SS AM') 
FROM     DUAL
;

Page 242

SELECT   TO_CHAR(  SYSDATE
                 , 'DD-MON-RRRR HH:MM:SS') 
                "Today's Date And Time"
FROM     DUAL
;

Page 244

SELECT   TO_DATE('2009-01-31','RRRR-MM-DD')
FROM     DUAL
;

Page 245

SELECT   TO_TIMESTAMP(  '2020-JAN-01 13:34:00:093423'
                      , 'RRRR-MON-DD HH24:MI:SS:FF') EVENT_TIME
FROM     DUAL
;

Page 246

SELECT   TO_DSINTERVAL('40 08:30:00.03225') EVENT_TIME
FROM     DUAL
;

SELECT   TO_YMINTERVAL('04-06') EVENT_TIME
FROM     DUAL
;

SELECT   'Chapter ' || 1 || ' . . . I am born.'
FROM     DUAL
;

Page 247

SELECT   SYSDATE
       , ADD_MONTHS(  SYSDATE
                    , SUBSTR('plus 3 months',6,1)) PLUS_THREE
FROM     DUAL
;

Page 249

SELECT   DBTIMEZONE
       , SESSIONTIMEZONE
FROM     DUAL
;

(Author's note:  If the next statement produces an error message, see the book for more information.)

ALTER DATABASE 
  SET TIME_ZONE = 'Europe/Zurich'
;

ALTER SESSION 
  SET TIME_ZONE = 'America/Los_Angeles'
;

Page 250

SELECT   OWNER
       , TABLE_NAME
       , COLUMN_NAME
       , DATA_TYPE
FROM     DBA_TAB_COLUMNS
WHERE    DATA_TYPE LIKE '%LOCAL TIME_ZONE%'
ORDER BY OWNER
       , TABLE_NAME
       , COLUMN_NAME
;

Page 252

SELECT   TZABBREV
       , TZNAME
FROM     V$TIMEZONE_NAMES
ORDER BY TZABBREV
       , TZNAME
;

Page 253

SELECT   DBTIMEZONE 
FROM     DUAL
;

Page 254

SELECT   SESSIONTIMEZONE 
FROM     DUAL
;

SELECT   CURRENT_DATE
       , CURRENT_TIMESTAMP
FROM     DUAL
;

Page 255

SELECT   LOCALTIMESTAMP(4) 
FROM     DUAL
;

SELECT   SYSTIMESTAMP 
FROM     DUAL
;

Page 256

SELECT   TO_CHAR(
           NEW_TIME(
             TO_DATE(  '1983-JAN-03 14:30:56'
                     , 'RRRR-MON-DD HH24:MI:SS')
             , 'AST'
             , 'HST')
           ,'DD-MON-RR HH:MI:SS') 
           NEW_DATE
FROM     DUAL
;

Page 257

SELECT   FROM_TZ( TIMESTAMP '2012-10-12 07:45:30', '+07:30')
FROM     DUAL
;

Page 258

SELECT   TO_TIMESTAMP_TZ(  '17-04-2013 16:45:30'
                          ,'DD-MM-RRRR HH24:MI:SS') "Time"
FROM     DUAL
;

SELECT   CAST('19-JAN-10 11:35:30' AS TIMESTAMP WITH LOCAL TIME ZONE) 
            "Converted LTZ"
FROM     DUAL
;

Page 259

SELECT   CAST(TO_TIMESTAMP(  '19-JAN-10 14:35:30'
                           , 'DD-MON-RR HH24:MI:SS')
              AS TIMESTAMP WITH LOCAL TIME ZONE
             ) "Converted LTZ"
FROM     DUAL
;

SELECT   EXTRACT(MINUTE FROM TO_TIMESTAMP(   '2009-10-11 12:13:14'
                                           , 'RRRR-MM-DD HH24:MI:SS')
                ) "Minute"
FROM     DUAL
;

Page 260

SELECT   SYS_EXTRACT_UTC(TIMESTAMP '2012-03-25 09:55:00 -04:00') "HQ"
FROM     DUAL
;

Page 261

SELECT   DBTIMEZONE
       , SESSIONTIMEZONE 
FROM     DUAL
;

SELECT TO_TIMESTAMP(  '2012-MAY-24 02:00:00'
                    , 'RRRR-MON-DD HH24:MI:SS')
                    AT TIME ZONE DBTIMEZONE "DB Time"
FROM    DUAL
;

Page 262

SELECT FROM_TZ(
               CAST(
                    TO_DATE(  '1999-12-01 11:00:00'
                            , 'RRRR-MM-DD HH:MI:SS'
                           ) AS TIMESTAMP
                    ), 'America/Los_Angeles'
              ) AT LOCAL "East Coast Time"
FROM    DUAL
;



7. Reporting Aggregated Data Using the Group Functions

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE PAY_HISTORY
REM

CREATE TABLE PAY_HISTORY
(  PAY_HISTORY_ID      NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER(10,2)
 , START_DATE          DATE
 , END_DATE            DATE
 , CONSTRAINT          PK_PAY_HISTORY_ID 
                       PRIMARY KEY (PAY_HISTORY_ID)
);

REM
REM CREATE TABLE VENDORS
REM

CREATE TABLE VENDORS
(  VENDOR_ID           NUMBER
 , VENDOR_NAME         VARCHAR2(20)
 , STATUS              NUMBER(3)
 , CATEGORY            VARCHAR2(10)
 , CONSTRAINT          PK_VENDOR_ID
                       PRIMARY KEY (VENDOR_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE ORDERS
REM

CREATE TABLE ORDERS
(  ORDER_ID             NUMBER
 , ORDER_DATE           DATE
 , SUBTOTAL             NUMBER
 , CONSTRAINT PK_ORDER_ID 
              PRIMARY KEY (ORDER_ID)
);

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_PAY_HISTORY_ID
REM

CREATE SEQUENCE SEQ_PAY_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_VENDOR_ID
REM

CREATE SEQUENCE SEQ_VENDOR_ID;

REM
REM CREATE SEQUENCE SEQ_ORDER_ID
REM

CREATE SEQUENCE SEQ_ORDER_ID;

REM
REM INSERT INTO ORDERS 
REM

INSERT INTO ORDERS VALUES
(SEQ_ORDER_ID.NEXTVAL, (SYSDATE-3), 230);

INSERT INTO ORDERS VALUES
(SEQ_ORDER_ID.NEXTVAL, (SYSDATE-5), 4750);

INSERT INTO ORDERS VALUES
(SEQ_ORDER_ID.NEXTVAL, (SYSDATE+3), 5000);

INSERT INTO ORDERS VALUES
(SEQ_ORDER_ID.NEXTVAL, (SYSDATE-9), 87);

INSERT INTO ORDERS VALUES
(SEQ_ORDER_ID.NEXTVAL, (SYSDATE+2), 119);

REM
REM INSERT INTO EMPLOYEES AND PAY_HISTORY 
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 73922
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 47000
 , '04-JUN-01'
 , '12-DEC-07');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 58000
 , '13-JUL-09'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 37450
 , '04-JUN-01'
 , '08-APR-05');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 91379
 , '05-FEB-12'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 45500
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Ocean',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'None' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'None' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Ocean',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'None' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'None' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','None',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, 410);

REM
REM INSERT INTO VENDORS
REM

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Steaks', 17, NULL);

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Poker Chips', NULL, NULL);

COMMIT;

You are ready to begin.

Page 278

SELECT   VENDOR_NAME
       , STATUS
       , CATEGORY
FROM     VENDORS
; 

SELECT   COUNT(VENDOR_NAME)
       , COUNT(STATUS)
       , COUNT(CATEGORY)
FROM     VENDORS
;

SELECT   COUNT(*)
FROM     VENDORS
;

Page 279

SELECT   COUNT(*)
       , COUNT(VENDOR_NAME)
FROM     VENDORS
;

SELECT   COUNT(DISTINCT LAST_NAME)
       , COUNT(ALL LAST_NAME)
FROM     EMPLOYEES
;

Page 280

SELECT   SUM(SUBTOTAL)
FROM     ORDERS
;

SELECT   SUM(SUBTOTAL)
FROM     ORDERS
WHERE    ORDER_DATE = SYSDATE
;

Page 281

SELECT   MIN(LAST_NAME)
       , MAX(LAST_NAME) 
FROM     EMPLOYEES
;

SELECT   PAY_HISTORY_ID
       , SALARY 
FROM     PAY_HISTORY
;

SELECT   AVG(SALARY) 
FROM     PAY_HISTORY
;

Page 282

SELECT   ROUND(AVG(SALARY),2) 
FROM     PAY_HISTORY
;

SELECT   TO_CHAR(ROUND(AVG(SALARY),2),'$999,999.99') 
FROM     PAY_HISTORY
;

Page 283

CREATE TABLE TEST_MEDIAN(A NUMBER(3));

INSERT INTO TEST_MEDIAN VALUES (1);

INSERT INTO TEST_MEDIAN VALUES (10);

INSERT INTO TEST_MEDIAN VALUES (3);

SELECT   MEDIAN(A) 
FROM     TEST_MEDIAN
;

SELECT   RANK(300) WITHIN GROUP (ORDER BY SQ_FT)
FROM     SHIP_CABINS
;

Page 284

SELECT   MAX(SQ_FT) KEEP (DENSE_RANK FIRST ORDER BY GUESTS) 
         "Largest"
FROM     SHIP_CABINS
;

Page 286

SELECT   SHIP_CABIN_ID
       , ROOM_NUMBER
       , ROOM_STYLE
       , ROOM_TYPE
       , WINDOW
       , GUESTS
       , SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
;

SELECT   ROUND(AVG(SQ_FT),2)
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
;

Page 287

SELECT   ROUND(AVG(SQ_FT),2)
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1 
         AND 
         ROOM_STYLE = 'Stateroom'
;

SELECT   ROUND(AVG(SQ_FT),2)
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1 
         AND 
         ROOM_STYLE = 'Suite'
;

SELECT   ROOM_STYLE
       , ROUND(AVG(SQ_FT),2)
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
;

Page 288

SELECT   ROOM_STYLE
       , ROUND(AVG(SQ_FT),2) "Average SQ FT"
       , MIN(GUESTS) "Minimum # of Guests"
       , COUNT(SHIP_CABIN_ID) "Total # of cabins"
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
;

Page 289

SELECT   ROOM_TYPE
       , TO_CHAR(ROUND(AVG(SQ_FT),2),'999,999.99') "Average SQ FT"
       , MAX(GUESTS) "Maximum # of Guests"
       , COUNT(SHIP_CABIN_ID) "Total # of cabins"
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_TYPE
ORDER BY 2 DESC
;

Page 290

SELECT   TO_CHAR(ROUND(AVG(SQ_FT),2),'999,999.99') "Average SQ FT"
       , MAX(GUESTS) "Maximum # of Guests"
       , COUNT(SHIP_CABIN_ID) "Total # of cabins"
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1 
         AND 
         ROOM_TYPE = 'Royal'
ORDER BY 1 DESC
;

Page 291

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , TO_CHAR(MIN(SQ_FT),'9,999') "Min"
       , TO_CHAR(MAX(SQ_FT),'9,999') "Max"
       , TO_CHAR(MIN(SQ_FT)-MAX(SQ_FT),'9,999') "Diff"
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
ORDER BY 3
;

Page 292

SELECT   TO_CHAR(MEDIAN(SQ_FT),'999.99') 
FROM     SHIP_CABINS
;

Page 293

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , MAX(SQ_FT)
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
;

Page 294

(Author's note:  The next statement produces an error message.  See the book for more information.)

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , AVG(MAX(SQ_FT))
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
;

SELECT   AVG(MAX(SQ_FT))
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
;

Page 295

(Author's note:  The next statement produces an error message.  See the book for more information.)

SELECT   COUNT(AVG(MAX(SQ_FT)))
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
;

SELECT   ROUND(AVG(MAX(SQ_FT)))
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
;

Page 297

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , TO_CHAR(MIN(SQ_FT),'9,999') "Min"
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
HAVING   ROOM_TYPE IN ('Standard', 'Large')
         OR 
         MIN(SQ_FT) > 1200
ORDER BY 3
;


8. Displaying Data from Multiple Tables
Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE SHIPS

REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE VENDORS
REM

CREATE TABLE VENDORS
(  VENDOR_ID           NUMBER
 , VENDOR_NAME         VARCHAR2(20)
 , CONSTRAINT          PK_VENDOR_ID
                       PRIMARY KEY (VENDOR_ID)
);

REM
REM CREATE TABLE ADDRESSES
REM

CREATE TABLE ADDRESSES
(
   ADDRESS_ID          NUMBER
 , EMPLOYEE_ID         NUMBER
 , STREET_ADDRESS      VARCHAR2(40)
 , STREET_ADDRESS2     VARCHAR2(40)
 , CITY                VARCHAR2(30)
 , STATE               VARCHAR2(2)
 , ZIP                 VARCHAR2(5)
 , ZIP_PLUS            VARCHAR2(4)
 , COUNTRY             VARCHAR2(20)
 , CONTACT_EMAIL       VARCHAR2(80)
 , CONSTRAINT          PK_ADDRESS_ID
                       PRIMARY KEY (ADDRESS_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE ONLINE_SUBSCRIBERS
REM

CREATE TABLE ONLINE_SUBSCRIBERS
(
   ONLINE_SUBSCRIBER_ID NUMBER
 , LASTNAME             VARCHAR2(30)
, CONSTRAINT           PK_ONLINE_SUBSCRIBER_ID
                        PRIMARY KEY (ONLINE_SUBSCRIBER_ID)
);

REM
REM CREATE TABLE POSITIONS 
REM

CREATE TABLE POSITIONS
(  POSITION_ID         NUMBER(4)
 , POSITION            VARCHAR2(20)
 , REPORTS_TO          NUMBER
 , EXEMPT              CHAR(1)
 , MIN_SALARY          NUMBER(10,2)
 , MAX_SALARY          NUMBER(10,2)
 , CONSTRAINT          PK_POSITIONS 
                       PRIMARY KEY (POSITION_ID)
);

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_ADDRESS_ID 
REM

CREATE SEQUENCE SEQ_ADDRESS_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_POSITION_ID
REM

CREATE SEQUENCE SEQ_POSITION_ID;

REM
REM CREATE SEQUENCE SEQ_VENDOR_ID
REM

CREATE SEQUENCE SEQ_VENDOR_ID;

REM
REM CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID
REM

CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID;

REM
REM INSERT INTO POSITIONS
REM

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Captain', 240000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Director', 1, 175000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Manager', 2, 120000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Crew Chief', 2, 88300);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Crew', 4, 65000);

REM
REM INSERT INTO PORTS
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

REM
REM INSERT INTO SHIPS
REM

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Crystal', 2052, 855, 1) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Elegance', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Champion', 2974, 952, NULL) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Victorious', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Grandeur', 2446, 916, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Prince', 395, 470, 2) 
;

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Ocean',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'None' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'None' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Ocean',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'None' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'None' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','None',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, 410);

REM
REM INSERT INTO EMPLOYEES
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO ADDRESSES
REM

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 1
   , '350 Oracle Parkway'
   , NULL
   , 'Redwood City'
   , 'CA'
   , '94065'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '1600 Amphitheatre Parkway'
   , NULL
   , 'Mountain View'
   , 'CA'
   , '94043'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 3
   , '1 Dell Way'
   , NULL
   , 'Round Rock'
   , 'TX'
   , '78682'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 4
   , '29 E Ohio St'
   , NULL
   , 'Chicago'
   , 'IL'
   , '60611'
   , '2707'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 5
   , '5788 Roswell Rd NE'
   , NULL
   , 'Atlanta'
   , 'GA'
   , '30328'
   , '4904'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '10103 100 St NW'
   , NULL
   , 'Edmonton'
   , 'AB'
   , 'T5J'
   , '0N8'
   , 'Canada'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 6
   , '1221 Avenue of the Americas'
   , NULL
   , 'New York'
   , 'NY'
   , '10020'
   , NULL
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '239 Baker Street'
   , NULL
   , 'London'
   , NULL
   , 'NW1'
   , '6X3'
   , 'UK'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 7
   , '1 rue des Carrieres'
   , NULL
   , 'Quebec City'
   , 'QC'
   , 'G1R'
   , '4P5'
   , 'Canada'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 4
   , '2041 S Harbor Blvd'
   , NULL
   , 'Anaheim'
   , 'CA'
   , '92802'
   , '3513'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 2
   , '600 N Michigan Ave'
   , NULL
   , 'Chicago'
   , 'IL'
   , '60611'
   , '3113'
   , 'USA'
   , NULL
   );

INSERT INTO ADDRESSES
  (  ADDRESS_ID
   , EMPLOYEE_ID
   , STREET_ADDRESS
   , STREET_ADDRESS2
   , CITY
   , STATE
   , ZIP
   , ZIP_PLUS
   , COUNTRY
   , CONTACT_EMAIL)
VALUES
  (  SEQ_ADDRESS_ID.NEXTVAL
   , 6
   , '1515 Sheridan Rd'
   , NULL
   , 'Wilmette'
   , 'IL'
   , '60091'
   , NULL
   , 'USA'
   , NULL
   );

REM
REM INSERT INTO ONLINE_SUBSCRIBERS
REM

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , LASTNAME
)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , 'KLINE'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , LASTNAME
)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , 'bryant'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , LASTNAME
)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , 'McLean'
); 

REM
REM INSERT INTO VENDORS
REM

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Steaks');

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Poker Chips');


REM
REM CREATE TABLE SCORES
REM

CREATE TABLE SCORES(
   SCORE_ID NUMBER
 , TEST_SCORE VARCHAR2(5)
 , UPDATED_TEST_SCORE VARCHAR2(5)
 , CONSTRAINT PK_SCORE_ID PRIMARY KEY (SCORE_ID)
);

REM
REM CREATE SEQUENCE SEQ_SCORE_ID
REM

CREATE SEQUENCE SEQ_SCORE_ID;

REM
REM INSERT INTO SCORES
REM

INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,95,95);

INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,55,75);

INSERT INTO SCORES VALUES (SEQ_SCORE_ID.NEXTVAL,83,83);

REM
REM CREATE TABLE GRADING
REM

CREATE TABLE GRADING(
   GRADING_ID NUMBER
 , GRADE      CHAR(1)
 , SCORE_MIN  NUMBER(3)
 , SCORE_MAX  NUMBER(3)
 , CONSTRAINT PK_GRADING_ID PRIMARY KEY (GRADING_ID)
);

REM
REM CREATE SEQUENCE SEQ_GRADING_ID
REM

CREATE SEQUENCE SEQ_GRADING_ID;

REM
REM INSERT INTO GRADING VALUES
REM

INSERT INTO GRADING VALUES 
           (SEQ_GRADING_ID.NEXTVAL, 'A', 90, 100);

INSERT INTO GRADING VALUES 
           (SEQ_GRADING_ID.NEXTVAL, 'B', 80, 89);

INSERT INTO GRADING VALUES 
           (SEQ_GRADING_ID.NEXTVAL, 'C', 70, 79);

INSERT INTO GRADING VALUES 
           (SEQ_GRADING_ID.NEXTVAL, 'D', 60, 69);

INSERT INTO GRADING VALUES 
           (SEQ_GRADING_ID.NEXTVAL, 'E', 50, 59);

COMMIT;

You are ready to begin.
Page 317

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS INNER JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS INNER JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
WHERE    PORT_NAME = 'Charleston'
ORDER BY SHIP_ID
;

Page 318

SELECT   S.SHIP_ID
       , S.SHIP_NAME
       , P.PORT_NAME
FROM     SHIPS S
       , PORTS P
WHERE    S.HOME_PORT_ID = P.PORT_ID
ORDER BY S.SHIP_ID
;

SELECT   S.SHIP_ID
       , S.SHIP_NAME
       , P.PORT_NAME
FROM     SHIPS S
       , PORTS P
WHERE    S.HOME_PORT_ID = P.PORT_ID
         AND 
         PORT_NAME = 'Charleston'
ORDER BY S.SHIP_ID
;

Page 319

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS LEFT OUTER JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS LEFT JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS RIGHT OUTER JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

Page 320

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS FULL OUTER JOIN PORTS
         ON HOME_PORT_ID = PORT_ID
ORDER BY SHIP_ID
;

Page 321

SELECT   SHIP_ID
       , SHIP_NAME
       , PORT_NAME
FROM     SHIPS
       , PORTS
WHERE    HOME_PORT_ID = PORT_ID(+)
ORDER BY SHIP_ID
;

(Author's note:  The next statement produces an error message.  See the book for more information.)

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , STREET_ADDRESS
FROM     EMPLOYEES INNER JOIN ADDRESSES
         ON EMPLOYEE_ID = EMPLOYEE_ID
;

Page 322

SELECT   EMPLOYEES.EMPLOYEE_ID
       , LAST_NAME
       , STREET_ADDRESS
FROM     EMPLOYEES INNER JOIN ADDRESSES
         ON EMPLOYEES.EMPLOYEE_ID = ADDRESSES.EMPLOYEE_ID
;

Page 323

SELECT   EM.EMPLOYEE_ID
       , LAST_NAME
       , STREET_ADDRESS
FROM     EMPLOYEES EM INNER JOIN ADDRESSES AD
         ON EM.EMPLOYEE_ID = AD.EMPLOYEE_ID
;

Page 324

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , STREET_ADDRESS
FROM     EMPLOYEES NATURAL JOIN ADDRESSES
;

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , STREET_ADDRESS
FROM     EMPLOYEES LEFT JOIN ADDRESSES
         USING (EMPLOYEE_ID)
;

Page 325

SELECT   P.PORT_NAME
       , S.SHIP_NAME
       , SC.ROOM_NUMBER
FROM     PORTS P JOIN SHIPS S        ON P.PORT_ID = S.HOME_PORT_ID
                 JOIN SHIP_CABINS SC ON S.SHIP_ID = SC.SHIP_ID
;

Page 327

SELECT   S.SCORE_ID
       , S.TEST_SCORE
       , G.GRADE
FROM     SCORES S JOIN GRADING G ON S.TEST_SCORE 
                                    BETWEEN 
                                    G.SCORE_MIN AND G.SCORE_MAX
;

Page 329

ALTER TABLE POSITIONS
ADD   CONSTRAINT FK_PO_PO FOREIGN KEY (REPORTS_TO)
                          REFERENCES POSITIONS (POSITION_ID)
;

Page 330

SELECT   A.POSITION_ID
       , A.POSITION
       , B.POSITION BOSS
FROM     POSITIONS A LEFT OUTER JOIN POSITIONS B
         ON A.REPORTS_TO = B.POSITION_ID
ORDER BY A.POSITION_ID
;

Page 331

SELECT   *
FROM     VENDORS
       , ONLINE_SUBSCRIBERS
;

SELECT   *
FROM     VENDORS CROSS JOIN ONLINE_SUBSCRIBERS
;



9. Retrieving Data Using Subqueries

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES 
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE INVOICES
REM

CREATE TABLE INVOICES
(  INVOICE_ID          NUMBER
 , INVOICE_DATE        DATE
 , ACCOUNT_NUMBER      VARCHAR2(80)
 , TERMS_OF_DISCOUNT   VARCHAR2(20)
 , VENDOR_ID           NUMBER
 , TOTAL_PRICE         NUMBER(8,2)
 , SHIPPING_DATE       DATE
 , CONSTRAINT PK_INVOICE_ID PRIMARY KEY (INVOICE_ID)
);

REM
REM CREATE TABLE CRUISE_CUSTOMERS
REM

CREATE TABLE CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID   NUMBER
 , FIRST_NAME           VARCHAR2(20)
 , LAST_NAME            VARCHAR2(30)
 , CONSTRAINT PK_CRUISE_CUSTOMER_ID 
              PRIMARY KEY (CRUISE_CUSTOMER_ID)
);

REM
REM CREATE TABLE PAY_HISTORY
REM

CREATE TABLE PAY_HISTORY
(  PAY_HISTORY_ID      NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER(10,2)
 , START_DATE          DATE
 , END_DATE            DATE
 , CONSTRAINT          PK_PAY_HISTORY_ID 
                       PRIMARY KEY (PAY_HISTORY_ID)
);

REM
REM CREATE TABLE VENDORS
REM

CREATE TABLE VENDORS
(  VENDOR_ID           NUMBER
 , VENDOR_NAME         VARCHAR2(20)
 , STATUS              NUMBER(3)
 , CATEGORY            VARCHAR2(10)
 , CONSTRAINT          PK_VENDOR_ID
                       PRIMARY KEY (VENDOR_ID)
);

REM
REM CREATE TABLE SHIPS
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE EMP_BENEFITS
REM

CREATE TABLE EMP_BENEFITS
(  EMP_BENEFITS_ID   NUMBER
 , SOCIAL_NUMBER VARCHAR2(9)
);

REM
REM INSERT INTO EMP_BENEFITS
REM

INSERT INTO EMP_BENEFITS VALUES (17, '111223333'); 

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_INVOICE_ID
REM

CREATE SEQUENCE SEQ_INVOICE_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID
REM

CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

REM
REM CREATE SEQUENCE SEQ_PAY_HISTORY_ID
REM

CREATE SEQUENCE SEQ_PAY_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_VENDOR_ID
REM

CREATE SEQUENCE SEQ_VENDOR_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM INSERT INTO PORTS
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Galveston', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Diego', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Francisco', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Los Angeles', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Honolulu', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'St. Thomas', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Juan', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Nassau', 'Bahamas', 7)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Grand Cayman', 'UK', 3)
;

REM
REM INSERT INTO SHIPS
REM

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Crystal', 2052, 855, 1) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Elegance', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Champion', 2974, 952, NULL) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Victorious', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Grandeur', 2446, 916, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Prince', 395, 470, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Harmony', 940, 790, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Voyager', 3114, 1020, 2) 
;

REM
REM INSERT INTO EMPLOYEES AND PAY_HISTORY
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 73922
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 47000
 , '04-JUN-01'
 , '12-DEC-07');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 58000
 , '13-JUL-09'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 37450
 , '04-JUN-01'
 , '08-APR-05');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 91379
 , '05-FEB-12'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 45500
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SSN
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington', '111223333'
 , 2, 1);

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Ocean',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'None' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'None' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Ocean',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'None' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'None' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','None',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, 410);

REM
REM INSERT INTO VENDORS
REM

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Steaks', 17, 'Partner');

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Poker Chips', NULL, 'Supplier');

REM
REM INSERT INTO INVOICES
REM

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '01-OCT-10'
   , 'RO-01'
   , '2 pct on 30'
   , 1
   , 1308.23
   , '03-OCT-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '17-JAN-10'
   , 'cre-kit-A1233-V01'
   , NULL
   , 2
   , 2503.75
   , '23-JAN-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '12-FEB-10'
   , 'ae-TRR'
   , NULL
   , 2
   , 9500.23
   , '23-JAN-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '07-APR-10'
   , 'INV-PR-0101'
   , NULL
   , 2
   , 230.23
   , '07-MAY-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '12-MAY-10'
   , 'INV-PR-0189'
   , NULL
   , 2
   , 19423.00
   , '21-MAY-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '16-JUN-10'
   , 'INV-PR-2389'
   , NULL
   , 2
   , 827.23
   , '02-JUL-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '04-AUG-10'
   , 'D-230.23223'
   , NULL
   , 2
   , 33500.23
   , '14-AUG-10');

REM
REM INSERT INTO CRUISE_CUSTOMERS
REM

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'Nada'
 , 'Gilbert'
);

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'Nora'
 , 'MacCaulay'
);

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'William'
 , 'Bryant'
);

COMMIT;


You are ready to begin.
Page 350

SELECT   SHIP_ID
FROM     EMPLOYEES
WHERE    LAST_NAME = 'Smith' 
         AND 
         FIRST_NAME = 'Al'
;

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
WHERE    SHIP_ID = 1
         AND NOT (LAST_NAME = 'Smith' AND FIRST_NAME = 'Al')
;

Page 351

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
WHERE    SHIP_ID = (SELECT   SHIP_ID
                    FROM     EMPLOYEES
                    WHERE    LAST_NAME = 'Smith'
                             AND 
                             FIRST_NAME = 'Al')
         AND NOT (LAST_NAME = 'Smith' AND FIRST_NAME = 'Al')
;

(Author's note:  The next statement produces an error message.  See the book for more information.)

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
WHERE    SHIP_ID = (SELECT   SHIP_ID
                    FROM     EMPLOYEES
                    WHERE    LAST_NAME = 'Smith')
         AND NOT (LAST_NAME = 'Smith')
;

Page 352

SELECT   SHIP_ID 
FROM     EMPLOYEES 
WHERE    EMPLOYEE_ID = 5
;

SELECT   MIN(SHIP_ID) 
FROM     EMPLOYEES 
WHERE    LAST_NAME = 'Smith'
;

SELECT   SHIP_ID 
FROM     EMPLOYEES 
WHERE    LAST_NAME = 'Smith' 
         AND 
         ROWNUM < 2
;

Page 353

SELECT   EMPLOYEE_ID
       , LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
WHERE    SHIP_ID = (SELECT   SHIP_ID 
                    FROM     EMPLOYEES
                    WHERE    LAST_NAME = 'Smith' 
                             AND 
                             FIRST_NAME = 'Al')
         AND NOT (LAST_NAME = 'Smith' AND FIRST_NAME = 'Al')
         AND SSN = (SELECT   SOCIAL_NUMBER 
                    FROM     EMP_BENEFITS
                    WHERE    EMP_BENEFITS_ID = 17)
;

Page 354

SELECT   SHIP_ID
       , LAST_NAME
       , FIRST_NAME
FROM     EMPLOYEES
WHERE    SHIP_ID IN (SELECT   SHIP_ID 
                     FROM     EMPLOYEES 
                     WHERE    LAST_NAME = 'Smith')
ORDER BY SHIP_ID
       , LAST_NAME
;

Page 356

SELECT   EMPLOYEE_ID
FROM     EMPLOYEES
WHERE    (FIRST_NAME, LAST_NAME) IN
              (SELECT   FIRST_NAME, LAST_NAME
               FROM     CRUISE_CUSTOMERS)
         AND SHIP_ID = 1
;

Page 357

SELECT   INVOICE_ID
FROM     INVOICES
WHERE    (INVOICE_DATE, TOTAL_PRICE) =
             (SELECT   START_DATE, SALARY
              FROM     PAY_HISTORY
              WHERE    PAY_HISTORY_ID = 4)
;

Page 358

SELECT   VENDOR_NAME
       , (SELECT   TERMS_OF_DISCOUNT 
          FROM     INVOICES 
          WHERE    INVOICE_ID = 1) AS DISCOUNT
FROM     VENDORS
ORDER BY VENDOR_NAME
;

Page 359

INSERT INTO EMPLOYEES
(   EMPLOYEE_ID
 ,  SHIP_ID
)
VALUES
(   SEQ_EMPLOYEE_ID.NEXTVAL
 , (SELECT   SHIP_ID 
    FROM     SHIPS 
    WHERE    SHIP_NAME = 'Codd Champion')
);

Page 361

SELECT   A.SHIP_CABIN_ID
       , A.ROOM_STYLE
       , A.ROOM_NUMBER
       , A.SQ_FT
FROM     SHIP_CABINS A
WHERE    A.SQ_FT > (SELECT   AVG(SQ_FT)
                    FROM     SHIP_CABINS
                    WHERE    ROOM_STYLE = A.ROOM_STYLE)
ORDER BY A.ROOM_NUMBER
;

SELECT   ROOM_STYLE
       , AVG(SQ_FT)
FROM     SHIP_CABINS
GROUP BY ROOM_STYLE
;

Page 363

UPDATE INVOICES INV
SET    TERMS_OF_DISCOUNT = '10 PCT'
WHERE  TOTAL_PRICE = (SELECT MAX(TOTAL_PRICE)
                      FROM   INVOICES
                      WHERE  TO_CHAR(INVOICE_DATE, 'RRRR-Q') =
                             TO_CHAR(INV.INVOICE_DATE, 'RRRR-Q')
                     )
;

Page 364

UPDATE PORTS P
SET    CAPACITY = (SELECT COUNT(*)
                   FROM   SHIPS
                   WHERE  HOME_PORT_ID = P.PORT_ID)
WHERE EXISTS (SELECT *
              FROM   SHIPS
              WHERE  HOME_PORT_ID = P.PORT_ID)
;

Page 365

DELETE 
FROM   SHIP_CABINS S1
WHERE  S1.BALCONY_SQ_FT =
        (SELECT MIN(BALCONY_SQ_FT)
         FROM   SHIP_CABINS S2
         WHERE  S1.ROOM_TYPE = S2.ROOM_TYPE
                AND 
                S1.ROOM_STYLE = S2.ROOM_STYLE)
;

SELECT   PORT_ID
       , PORT_NAME
FROM     PORTS P1
WHERE    EXISTS (SELECT   *
                 FROM     SHIPS S1
                 WHERE    P1.PORT_ID = S1.HOME_PORT_ID)
;

Page 366

(Author's note:  The next statement is different than the code in the book.  Note the RED print for the correction.)

WITH
  PORT_BOOKINGS AS (
    SELECT   P.PORT_ID
           , P.PORT_NAME
           , COUNT(S.SHIP_ID) CT
    FROM     PORTS P
           , SHIPS S
    WHERE    P.PORT_ID = S.HOME_PORT_ID
    GROUP BY P.PORT_ID
           , P.PORT_NAME
    ),
    DENSEST_PORT AS (
      SELECT MAX(CT) MAX_CT
      FROM   PORT_BOOKINGS
  )
SELECT PORT_NAME
FROM   PORT_BOOKINGS
WHERE  CT = (SELECT MAX_CT FROM DENSEST_PORT)
;




10. Creating Other Schema Objects

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES 
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE PAY_HISTORY 
REM

CREATE TABLE PAY_HISTORY
(  PAY_HISTORY_ID      NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER(10,2)
 , START_DATE          DATE
 , END_DATE            DATE
 , CONSTRAINT          PK_PAY_HISTORY_ID 
                       PRIMARY KEY (PAY_HISTORY_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE CRUISE_ORDERS 
REM

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID      NUMBER
 , ORDER_DATE           DATE
 , POSTING_DATE         DATE
 , CRUISE_CUSTOMER_ID   NUMBER
 , SHIP_ID              NUMBER(7)
 , CONSTRAINT PK_CRUISE_ORDER_ID 
              PRIMARY KEY (CRUISE_ORDER_ID)
);

REM
REM CREATE TABLE INVOICES
REM

CREATE TABLE INVOICES
(  INVOICE_ID          NUMBER
 , INVOICE_DATE        DATE
 , ACCOUNT_NUMBER      VARCHAR2(80)
 , TERMS_OF_DISCOUNT   VARCHAR2(20)
 , VENDOR_ID           NUMBER
 , TOTAL_PRICE         NUMBER(8,2)
 , SHIPPING_DATE       DATE
 , CONSTRAINT PK_INVOICE_ID PRIMARY KEY (INVOICE_ID)
);

REM
REM CREATE TABLE ORDERS
REM

CREATE TABLE ORDERS
(  ORDER_ID            NUMBER
 , ORDER_DATE          DATE
 , CUSTOMER_ID         NUMBER
 , CONSTRAINT PK_ORDER_ID PRIMARY KEY (ORDER_ID)
);

REM
REM CREATE TABLE CRUISE_CUSTOMERS
REM

CREATE TABLE CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID   NUMBER
 , FIRST_NAME           VARCHAR2(20)
 , LAST_NAME            VARCHAR2(30)
 , CONSTRAINT PK_CRUISE_CUSTOMER_ID 
              PRIMARY KEY (CRUISE_CUSTOMER_ID)
);

REM
REM CREATE TABLE PROJECTS
REM

CREATE TABLE PROJECTS
(  PROJECT_ID          NUMBER
 , SHIP_ID             NUMBER(7)
 , PURPOSE             VARCHAR2(30)
 , PROJECT_NAME        VARCHAR2(40)
 , PROJECT_COST        NUMBER
 , DAYS                NUMBER
 , CONSTRAINT          PK_PROJECT_ID
                       PRIMARY KEY (PROJECT_ID)
 , CONSTRAINT          CK_PROJECT_COST 
                       CHECK (PROJECT_COST < 1000000)
);

REM
REM CREATE TABLE PORTS 
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_PAY_HISTORY_ID
REM

CREATE SEQUENCE SEQ_PAY_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID
REM

CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

REM
REM CREATE SEQUENCE SEQ_INVOICE_ID
REM

CREATE SEQUENCE SEQ_INVOICE_ID;

REM
REM CREATE SEQUENCE SEQ_PROJECT_ID
REM

CREATE SEQUENCE SEQ_PROJECT_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM INSERT INTO EMPLOYEES AND PAY_HISTORY 
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 73922
 , '04-JUN-01'
 , '');


INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 47000
 , '04-JUN-01'
 , '12-DEC-07');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 58000
 , '13-JUL-09'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 37450
 , '04-JUN-01'
 , '08-APR-05');

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 91379
 , '05-FEB-12'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO PAY_HISTORY
(  PAY_HISTORY_ID
 , EMPLOYEE_ID
 , SALARY
 , START_DATE
 , END_DATE)
VALUES 
(  SEQ_PAY_HISTORY_ID.NEXTVAL
 , SEQ_EMPLOYEE_ID.CURRVAL
 , 45500
 , '04-JUN-01'
 , '');

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO SHIP_CABINS 
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Balcony',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'Balcony' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'Balcony' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Balcony',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'Ocean' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'Ocean' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 701        , 'Suite'    , 'Presidential','Balcony',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','Balcony',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Balcony' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Balcony' ,      8,   722, 410);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 705        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 706        , 'Suite' , 'Standard' , 'Balcony' ,     4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 707        , 'Stateroom' , 'Standard' , 'Ocean' ,     3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 708        , 'Suite' , 'Standard' , 'Balcony' ,     6,   586, 193);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 709        , 'Stateroom' , 'Large' , 'None' ,     2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 710        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 801        , 'Suite'    , 'Presidential','None',    5,  1142, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 802        , 'Suite'    , 'Presidential','Ocean',    5,  1142, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 803        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 804        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 805        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 806        , 'Suite' , 'Standard' , 'Ocean' ,     4,   533, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 807        , 'Stateroom' , 'Standard' , 'Ocean' ,     3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 808        , 'Suite' , 'Standard' , 'None' ,     6,   586, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 809        , 'Stateroom' , 'Large' , 'None' ,     2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 810        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   180, NULL);

REM
REM INSERT INTO CRUISE_ORDERS 
REM

INSERT INTO CRUISE_ORDERS VALUES
(100, NULL, NULL, 1, 1);

INSERT INTO CRUISE_ORDERS VALUES
(101, NULL, NULL, 1, 1);

INSERT INTO CRUISE_ORDERS VALUES
(102, NULL, NULL, 1, 1);

INSERT INTO CRUISE_ORDERS VALUES
(103, NULL, NULL, 1, 1);

REM
REM INSERT INTO INVOICES
REM

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , SYSDATE
   , 'RO-01'
   , '2 pct on 30'
   , 10
   , 1308.23
   , '03-OCT-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '17-JAN-10'
   , 'cre-kit-A1233-V01'
   , NULL
   , 2
   , 2503.75
   , '23-JAN-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '12-FEB-10'
   , 'ae-TRR'
   , NULL
   , 10
   , 9500.23
   , '23-JAN-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '07-APR-10'
   , 'INV-PR-0101'
   , NULL
   , 2
   , 230.23
   , '07-MAY-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '12-MAY-10'
   , 'INV-PR-0189'
   , NULL
   , 2
   , 19423.00
   , '21-MAY-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '16-JUN-10'
   , 'INV-PR-2389'
   , NULL
   , 2
   , 827.23
   , '02-JUL-10');

INSERT INTO INVOICES
  (  INVOICE_ID
   , INVOICE_DATE
   , ACCOUNT_NUMBER
   , TERMS_OF_DISCOUNT
   , VENDOR_ID
   , TOTAL_PRICE
   , SHIPPING_DATE)
  VALUES
  (  SEQ_INVOICE_ID.NEXTVAL
   , '04-AUG-10'
   , 'D-230.23223'
   , NULL
   , 2
   , 33500.23
   , '14-AUG-10');

REM
REM INSERT INTO PROJECTS
REM

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES                 
  (  SEQ_PROJECT_ID.NEXTVAL
                , 2      , 'Maintenance', 'Deck Resurfacing'       , 964000      , 10);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 3      ,'Maintenance' , 'Lifeboat Inspection'    , 12000       , 3);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Clean Pools'            , 37000       , 5);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Replace lobby carpeting', 137000      , 5);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Major Engine Service'   , 837000      , 15);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Remodel Dining Room A'  , 950000      , 45);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Upgrade'     , 'Remodel Dining Room B'  , 925000      , 37);

INSERT INTO PROJECTS 
  (  PROJECT_ID , SHIP_ID, PURPOSE      , PROJECT_NAME             , PROJECT_COST, DAYS)
VALUES               
  (  SEQ_PROJECT_ID.NEXTVAL
                , 1      ,'Maintenance' , 'Lifeboat Inspection'    , 12000       , 3);

REM
REM INSERT INTO PORTS
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Galveston', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Diego', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Francisco', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Los Angeles', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Honolulu', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'St. Thomas', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Juan', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Nassau', 'Bahamas', 7)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Grand Cayman', 'UK', 3)
;

COMMIT;

You are ready to begin.
Page 383

CREATE VIEW VW_EMPLOYEES AS
       SELECT EMPLOYEE_ID
            , LAST_NAME
            , FIRST_NAME
            , PRIMARY_PHONE
       FROM   EMPLOYEES;

Page 384

DESC VW_EMPLOYEES;

SELECT * FROM VW_EMPLOYEES;

SELECT   FIRST_NAME || ' ' || LAST_NAME "Employee"
FROM     VW_EMPLOYEES
ORDER BY PRIMARY_PHONE
;

Page 385

(Author's note:  The next statement produces an error message.  See the book for more information.)

CREATE OR REPLACE VIEW VW_EMPLOYEES AS
       SELECT EMPLOYEE_ID
            , LAST_NAME || ', ' || FIRST_NAME
            , PRIMARY_PHONE
       FROM   EMPLOYEES
;

CREATE OR REPLACE VIEW VW_EMPLOYEES (ID, NAME, PHONE) AS
       SELECT EMPLOYEE_ID
            , LAST_NAME || ', ' || FIRST_NAME EMP_NAME
            , PRIMARY_PHONE
       FROM   EMPLOYEES
;

CREATE VIEW EMP_TREND AS
       SELECT EMP.SHIP_ID
            , MIN(SALARY) MIN_SALARY
       FROM   EMPLOYEES EMP LEFT JOIN PAY_HISTORY PAY
              ON EMP.EMPLOYEE_ID = PAY.EMPLOYEE_ID
       WHERE  END_DATE IS NULL
       GROUP BY EMP.SHIP_ID
;

Page 386

CREATE OR REPLACE VIEW SHIP_ONE_CABINS AS
       SELECT * 
       FROM   SHIP_CABINS 
       WHERE  SHIP_ID = 1
;

Page 387

CREATE OR REPLACE VIEW EMP_PHONE_BOOK AS 
       SELECT LAST_NAME
            , FIRST_NAME
            , PRIMARY_PHONE 
       FROM   EMPLOYEES
;

SELECT   LAST_NAME
       , FIRST_NAME
       , PRIMARY_PHONE
FROM     EMP_PHONE_BOOK
ORDER BY LAST_NAME
       , FIRST_NAME
;

(Author's note:  The next statement produces an error message.  See the book for more information.)

INSERT INTO EMP_PHONE_BOOK (LAST_NAME, FIRST_NAME, PRIMARY_PHONE)
VALUES ('Sotogovernor', 'Sonia', '212-555-1212');

UPDATE EMP_PHONE_BOOK
SET    PRIMARY_PHONE = '202-555-1212'
WHERE  LAST_NAME = 'Hoddlestein'
       AND 
       FIRST_NAME = 'Howard';

Page 388

CREATE OR REPLACE VIEW EMP_PHONE_BOOK AS 
       SELECT EMPLOYEE_ID
            , FIRST_NAME || ', ' || LAST_NAME EMP_NAME
            , PRIMARY_PHONE
       FROM   EMPLOYEES
;

INSERT INTO EMP_PHONE_BOOK 
(  EMPLOYEE_ID
 , PRIMARY_PHONE
)
VALUES
(  102
 , '800-555-1212')
;

Page 389

DELETE 
FROM   EMP_PHONE_BOOK 
WHERE  EMPLOYEE_ID = 102
;

SELECT   *
FROM     (SELECT   * 
          FROM     DUAL);

SELECT * 
FROM     (SELECT   * 
          FROM (SELECT   * 
                FROM    (SELECT   * 
                         FROM     DUAL)
               )
         )
;

Page 390

SELECT   A.SHIP_ID
       , A.COUNT_CABINS
       , B.COUNT_CRUISES
FROM    (SELECT   SHIP_ID
                , COUNT(SHIP_CABIN_ID) COUNT_CABINS
         FROM     SHIP_CABINS
         GROUP BY SHIP_ID) A
        JOIN
        (SELECT   SHIP_ID
                , COUNT(CRUISE_ORDER_ID) COUNT_CRUISES
         FROM     CRUISE_ORDERS
         GROUP BY SHIP_ID) B
        ON A.SHIP_ID = B.SHIP_ID
;

SELECT   ROWNUM
       , INVOICE_ID
       , ACCOUNT_NUMBER
FROM     ( SELECT   INVOICE_ID
                  , ACCOUNT_NUMBER
           FROM     INVOICES 
           ORDER BY INVOICE_DATE)
WHERE    ROWNUM <= 3
;

Page 392

ALTER VIEW VW_EMPLOYEES COMPILE;

CREATE SEQUENCE SEQ_ORDER_ID;

Page 394

(Author's note:  Here's a setup for the next script:

DROP SEQUENCE SEQ_ORDER_ID;

The above script allow you to run the next script.)

CREATE SEQUENCE SEQ_ORDER_ID START WITH 1 INCREMENT BY 1;

(Author's note:  Here's a setup for the next script:

DROP SEQUENCE SEQ_ORDER_ID;

The above script allow you to run the next script.)

CREATE SEQUENCE SEQ_ORDER_ID START WITH 10 INCREMENT BY 5;

INSERT INTO ORDERS 
(  ORDER_ID
 , ORDER_DATE
 , CUSTOMER_ID
)
VALUES 
(  SEQ_ORDER_ID.NEXTVAL
 , SYSDATE
 , 28
);

Page 395

(Author's note:  Here's a setup for the next script:

DROP SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

The above script allow you to run the next script.)

CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

CREATE SEQUENCE SEQ_CRUISE_ORDER_ID;

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
)
VALUES
(  SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'Joe'
 , 'Schmoe'
);

INSERT INTO CRUISE_ORDERS
(  CRUISE_ORDER_ID
 , ORDER_DATE
 , CRUISE_CUSTOMER_ID
)
VALUES
(  SEQ_CRUISE_ORDER_ID.NEXTVAL
 , SYSDATE
 , SEQ_CRUISE_CUSTOMER_ID.CURRVAL
);

Page 397

(Author's note:  Here's a setup for the next script:

CREATE SEQUENCE SEQ_PROJ_COST;

The above script allow you to run the next script.)

SELECT PROJECT_COST / (3 * SEQ_PROJ_COST.NEXTVAL) 
FROM PROJECTS
;

Page 398

CREATE TABLE SEMINARS
(  SEMINAR_ID   NUMBER(11)   PRIMARY KEY
 , SEMINAR_NAME VARCHAR2(30) UNIQUE)
;

SELECT   TABLE_NAME
       , INDEX_NAME
FROM     USER_INDEXES
WHERE    TABLE_NAME = 'SEMINARS'
;

Page 399

SELECT   INDEX_NAME
       , COLUMN_NAME
FROM     USER_IND_COLUMNS
WHERE    TABLE_NAME = 'SEMINARS'
;

CREATE INDEX IX_INV_INVOICE_DATE 
ON     INVOICES(INVOICE_DATE);


SELECT   * 
FROM     INVOICES 
WHERE    INVOICE_DATE = SYSDATE
;

Page 402

CREATE INDEX IX_INV_INVOICE_VENDOR_ID 
ON     INVOICES(VENDOR_ID, INVOICE_DATE);

SELECT   * 
FROM     INVOICES 
WHERE    VENDOR_ID = 10 
         AND 
         INVOICE_DATE = SYSDATE
;

SELECT   * 
FROM     INVOICES 
WHERE    VENDOR_ID = 10
;

Page 403

SELECT   * 
FROM     INVOICES 
WHERE    INVOICE_DATE = SYSDATE
;

CREATE UNIQUE INDEX IX_EMP_SSN 
ON     EMPLOYEES(SSN);

Page 404

DROP INDEX IX_INV_INVOICE_DATE;

Page 405

CREATE OR REPLACE SYNONYM CO 
FOR    CRUISE_ORDERS;

SELECT   * 
FROM     CO
;

Page 406

(Author's note:  You might need to execute the following statement as a setup.  I say you "might" need to, because it depends on whether you've already tried these scripts already or not.  If you have, and you've restarted the instructions from the beginning, then you've dropped and re-created the schema.  However, the next statement creates a PUBLIC SYNONYM, and PUBLIC SYNONYMS do not exist within the schema, they exist at the database level.  So dropping and recreating the schema won't drop any PUBLIC SYNONYMS you may have created earlier, those must be dropped specifically:

DROP PUBLIC SYNONYM WH;

The above script allow you to run the next script.)

CREATE PUBLIC SYNONYM WH 
FOR    WORK_HISTORY;

(Author's note:  Use the following setup scripts (Note that if you've already run through these scripts, you may need to first DROP the user LARRY, if not, you can skip the DROP statement):

DROP USER LARRY CASCADE;

CREATE USER LARRY IDENTIFIED BY AMERICAS_CUP;

GRANT DBA TO LARRY;


The above script allow you to run the next script.)

GRANT SELECT ON PORTS TO LARRY;

Page 407

(Author's note:  The next few scripts are intended to be executed from within the schema LARRY.  Connect to that schema:

CONNECT LARRY/AMERICAS_CUP

The above script give you the proper context to run the next script.)

SELECT * FROM CODD.PORTS;

(Author's note:  You might need to first issue this statement?

DROP PUBLIC SYNONYM PORTS;

The above script give you the proper context to run the next script.)

CREATE PUBLIC SYNONYM PORTS FOR CODD.PORTS;

SELECT * FROM PORTS;

SELECT * FROM CODD.PORTS;

(Author's note:  To fully test the concept behind the next script, do the following:

CONNECT CODD/EF

DROP TABLE PORTS;

DROP USER NEWOWNER CASCADE;

CREATE USER NEWOWNER IDENTIFIED BY NEWPASSWORD;

GRANT DBA TO NEWOWNER;

CONNECT NEWOWNER/NEWPASSWORD

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

CREATE SEQUENCE SEQ_PORT_ID;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

GRANT SELECT ON PORTS TO CODD, LARRY;

CONNECT CODD/EF

The above script give you the proper context to run the next script.)

CREATE OR REPLACE PUBLIC SYNONYM PORTS FOR NEWOWNER.PORTS;


Page 408

(Author's note:  To fully test the concept behind the next script, do the following:

DROP TABLE LAB_RESULTS;

DROP TABLE CABINETS;

DROP PUBLIC SYNONYM ACCT_01;

CREATE TABLE LAB_RESULTS
(  LAB_RESULT_ID  NUMBER
 , TEST_NAME      VARCHAR2(20)
);

INSERT INTO LAB_RESULTS VALUES (1, 'Lab Test One');

CREATE TABLE CABINETS
(  CABINET_ID     NUMBER
, CABINET_TYPE    VARCHAR2(30)
);

INSERT INTO CABINETS VALUES (10, 'Kitchen Standalone 4 drawer');

COMMIT;

The above script give you the proper context to run the next script.)

CREATE SYNONYM ACCT_01 FOR LAB_RESULTS;

CREATE PUBLIC SYNONYM ACCT_01 FOR CABINETS;

SELECT * FROM ACCT_01;

Page 409

CREATE OR REPLACE SYNONYM CO FOR CODD.CRUISE_ORDERS;

CREATE OR REPLACE PUBLIC SYNONYM CO FOR CODD.CRUISE_ORDERS;

Page 410

DROP SYNONYM CO;

DROP PUBLIC SYNONYM CO;


11. Managing Schema Objects

Setup 

Perform the Chapter 1 setup. 
You are ready to begin.
Page 424

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID NUMBER
 , SALES_REP_ID    NUMBER
);

ALTER TABLE CRUISE_ORDERS 
ADD   (ORDER_DATE VARCHAR2(20));

Page 425

(Author's note:  The next statement produces an error message.  See the book for more information.)

ALTER TABLE CRUISE_ORDERS
ADD   (WEATHER_CODE DEFAULT 0 NUMBER(2));

ALTER TABLE CRUISE_ORDERS
ADD   (WEATHER_CODE NUMBER(2) DEFAULT 0);

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS DROP COLUMN WEATHER_CODE;

The above script allow you to run the next script.)

ALTER TABLE CRUISE_ORDERS
ADD   (  WEATHER_CODE  NUMBER(2)    DEFAULT 0
       , TRAVEL_AGENCY VARCHAR2(27) NOT NULL);

Page 426

ALTER TABLE CRUISE_ORDERS
ADD   FIRST_TIME_CUSTOMER VARCHAR2(5) NOT NULL;

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS DROP COLUMN FIRST_TIME_CUSTOMER;

The above script allow you to run the next script.)

ALTER TABLE CRUISE_ORDERS
ADD   FIRST_TIME_CUSTOMER VARCHAR2(5) DEFAULT 'YES' NOT NULL;

Page 427

ALTER  TABLE CRUISE_ORDERS 
MODIFY (ORDER_DATE DATE);

Page 428

ALTER  TABLE CRUISE_ORDERS 
MODIFY (ORDER_DATE DATE NOT NULL);

ALTER  TABLE CRUISE_ORDERS 
MODIFY (ORDER_DATE DATE NULL);

Page 430

ALTER  TABLE CRUISE_ORDERS 
MODIFY ORDER_DATE VARCHAR2(35);

ALTER  TABLE CRUISE_ORDERS 
MODIFY ORDER_DATE NOT NULL;

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS MODIFY ORDER_DATE DATE NULL;

The above script allow you to run the next script.)

ALTER  TABLE CRUISE_ORDERS 
MODIFY ORDER_DATE CONSTRAINT NN_ORDER_DATE NOT NULL;

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS MODIFY ORDER_DATE DATE NULL;

The above script allow you to run the next script.)

ALTER  TABLE CRUISE_ORDERS
MODIFY ORDER_DATE DATE DEFAULT SYSDATE 
                  CONSTRAINT NN_ORDER_DATE NOT NULL;

ALTER  TABLE CRUISE_ORDERS 
RENAME COLUMN SALES_REP_ID TO SALES_AGENT_ID;

Page 431

(Author's note:  Here's a setup for the next script:

     DROP TABLE ORDER_RETURNS;
CREATE TABLE ORDER_RETURNS
(  ORDER_RETURN_ID    NUMBER
 , CRUISE_ORDER_DATE  DATE
 , FORM_TYPE          VARCHAR2(5)
 , NAME_SUFFIX        VARCHAR2(3)
);

The above script allow you to run the next script.)

ALTER TABLE ORDER_RETURNS 
DROP  COLUMN CRUISE_ORDER_DATE;

(Author's note:  Here's a setup for the next script:

ALTER TABLE ORDER_RETURNS ADD CRUISE_ORDER_DATE DATE;

The above script allow you to run the next script.)

ALTER TABLE ORDER_RETURNS 
DROP (CRUISE_ORDER_DATE);

Page 432
	
(Author's note:  Here's a setup for the next script:

ALTER TABLE ORDER_RETURNS ADD CRUISE_ORDER_DATE DATE;

The above script allow you to run the next script.)

ALTER TABLE ORDER_RETURNS
DROP (  CRUISE_ORDER_DATE
      , FORM_TYPE
      , NAME_SUFFIX)
;

(Author's note:  Here's a setup for the next script:

DROP TABLE CRUISE_ORDERS;
DROP TABLE ORDER_RETURNS;

The above script allow you to run the next script.)

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID NUMBER
 , ORDER_DATE DATE
 , CONSTRAINT PK_CO PRIMARY KEY (CRUISE_ORDER_ID, ORDER_DATE)
);

CREATE TABLE ORDER_RETURNS
(  ORDER_RETURN_ID   NUMBER
 , CRUISE_ORDER_ID   NUMBER
 , CRUISE_ORDER_DATE DATE
 , CONSTRAINT PK_OR PRIMARY KEY (ORDER_RETURN_ID)
 , CONSTRAINT FK_OR_CO FOREIGN KEY
                       (CRUISE_ORDER_ID, CRUISE_ORDER_DATE)
                       REFERENCES CRUISE_ORDERS 
                       (CRUISE_ORDER_ID, ORDER_DATE)
);

Page 433

(Author's note:  The first two scripts below are from Figure 11-2 on page 433.  This figure is referenced before the third script below is presented in the book.  In other words, the three scripts don't appear on the printed page in this sequence, but they are referenced logically by the text of the book in this sequence. Also note, the next two statements produce error messages.  See the book for more information.)

ALTER TABLE CRUISE_ORDERS
            DROP COLUMN ORDER_DATE;

ALTER TABLE ORDER_RETURNS
            DROP COLUMN CRUISE_ORDER_DATE;

ALTER TABLE ORDER_RETURNS
DROP  COLUMN CRUISE_ORDER_DATE CASCADE CONSTRAINTS;

Page 435

(Author's note:  Here's a setup for the next script:

ALTER TABLE ORDER_RETURNS ADD CRUISE_ORDER_DATE DATE;

The above script allow you to run the next script.)

ALTER TABLE ORDER_RETURNS
SET   UNUSED COLUMN CRUISE_ORDER_DATE;

(Author's note:  Here's a setup for the next script:

ALTER TABLE ORDER_RETURNS ADD CRUISE_ORDER_DATE DATE;

ALTER TABLE ORDER_RETURNS ADD FORM_TYPE VARCHAR2(5);

ALTER TABLE ORDER_RETURNS ADD NAME_SUFFIX VARCHAR2(3);

The above script allow you to run the next script.)

ALTER TABLE ORDER_RETURNS
SET   UNUSED (CRUISE_ORDER_DATE, FORM_TYPE, NAME_SUFFIX);

ALTER TABLE ORDER_RETURNS 
DROP  UNUSED COLUMNS;

Page 436

(Author's note:  Here's a setup for the next script:

DROP TABLE CRUISE_ORDERS;

The above script allow you to run the next script.)

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID   NUMBER
 , SALES_AGENT_ID    NUMBER
 , ORDER_DATE        DATE
 , CONFIRMATION_DATE DATE
);


ALTER  TABLE CRUISE_ORDERS
MODIFY CRUISE_ORDER_ID PRIMARY KEY;

Page 437

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER  TABLE CRUISE_ORDERS
MODIFY CRUISE_ORDER_ID CONSTRAINT PK_NEW_CONSTRAINT PRIMARY KEY;

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER TABLE CRUISE_ORDERS
ADD   CONSTRAINT PK_NEW_CONSTRAINT 
      PRIMARY KEY (CRUISE_ORDER_ID);

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS DROP PRIMARY KEY;

The above script allow you to run the next script.)

ALTER TABLE CRUISE_ORDERS
ADD   CONSTRAINT PK_NEW_CONSTRAINT 
      PRIMARY KEY (CRUISE_ORDER_ID, SALES_AGENT_ID);

Page 438

ALTER  TABLE CRUISE_ORDERS
MODIFY CRUISE_ORDER_ID NOT NULL;

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS MODIFY CRUISE_ORDER_ID NULL;

The above script allow you to run the next script.)

ALTER  TABLE CRUISE_ORDERS
MODIFY CRUISE_ORDER_ID CONSTRAINT NN_CRUISE_ORDER_ID NOT NULL;

(Author's note:  The next statement produces an error message.  See the book for more information.)

ALTER  TABLE CRUISE_ORDERS
ADD    CONSTRAINT NN_THIS_IS_WRONG NOT NULL (CRUISE_ORDER_ID);

Page 439

ALTER TABLE CRUISE_ORDERS
ADD   CONSTRAINT CK_ORDER_DATE CHECK 
                 (ORDER_DATE <= CONFIRMATION_DATE);

(Author's note:  Here's a setup for the next script:

DROP TABLE SALES_AGENTS;
CREATE TABLE SALES_AGENTS
(  SALES_AGENT_ID   NUMBER PRIMARY KEY
,  FIRST_NAME       VARCHAR2(20)
,  LAST_NAME        VARCHAR2(30)
);

The above script allow you to run the next script.)

ALTER TABLE CRUISE_ORDERS
ADD   CONSTRAINT FK_CRUISE_ORDERS_SALES_AGENTS
      FOREIGN KEY (SALES_AGENT_ID)
      REFERENCES SALES_AGENTS(SALES_AGENT_ID);

Page 443

CREATE TABLE PORTS
(  PORT_ID NUMBER(7)
 , PORT_NAME VARCHAR2(20)
 , CONSTRAINT PK_PORTS PRIMARY KEY (PORT_ID)
);

CREATE TABLE SHIPS
(  SHIP_ID NUMBER(7)
 , SHIP_NAME VARCHAR2(20)
 , HOME_PORT_ID NUMBER(7)
 , CONSTRAINT PK_SHIPS PRIMARY KEY (SHIP_ID)
 , CONSTRAINT FK_SH_PO FOREIGN KEY (HOME_PORT_ID) 
                       REFERENCES PORTS (PORT_ID)
);

INSERT INTO PORTS VALUES (50, 'Jacksonville');

INSERT INTO PORTS VALUES (51, 'New Orleans');

INSERT INTO SHIPS VALUES (10, 'Codd Royale', 50);

Page 444

(Author's note:  The next statement produces an error message.  See the book for more information.)

DELETE FROM PORTS WHERE PORT_ID = 50;

DELETE FROM PORTS WHERE PORT_ID = 51;

Page 445

ALTER TABLE SHIPS DISABLE CONSTRAINT FK_SH_PO;

Page 446

SELECT CONSTRAINT_NAME
     , CONSTRAINT_TYPE
FROM   USER_CONSTRAINTS
WHERE  TABLE_NAME = 'SHIPS';

Page 447

ALTER TABLE SHIPS ENABLE CONSTRAINT FK_SH_PO;

(Author's note:  The next statement produces an error message.  See the book for more information.)

ALTER TABLE PORTS DISABLE PRIMARY KEY;

ALTER TABLE PORTS DISABLE PRIMARY KEY CASCADE;

Page 448

ALTER TABLE PORTS ENABLE PRIMARY KEY;

ALTER TABLE SHIPS ENABLE VALIDATE CONSTRAINT FK_SH_PO;

Page 449

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIP_HISTORY;
CREATE TABLE SHIP_HISTORY
(  SHIP_HISTORY_ID   NUMBER PRIMARY KEY
,  LOG_TEXT          VARCHAR2(3000)
);

The above script allow you to run the next script.)

DROP TABLE SHIP_HISTORY;

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIP_HISTORY CASCADE CONSTRAINTS;

CREATE TABLE SHIP_HISTORY
(  SHIP_HISTORY_ID   NUMBER PRIMARY KEY
,  LOG_TEXT          VARCHAR2(3000)
);

DROP TABLE MASTER_RECORDS;

CREATE TABLE MASTER_RECORDS
(  MASTER_RECORD_ID NUMBER PRIMARY KEY
,  RECORD_TITLE  VARCHAR2(20)
,  DETAIL_ID NUMBER 
,  CONSTRAINT FK_1 FOREIGN KEY (DETAIL_ID) REFERENCES SHIP_HISTORY(SHIP_HISTORY_ID)
);

The above script allow you to run the next script.)

DROP TABLE SHIP_HISTORY CASCADE CONSTRAINTS;

Page 450

SELECT   TABLE_NAME
       , CONSTRAINT_NAME
       , CONSTRAINT_TYPE 
FROM     USER_CONSTRAINTS
WHERE    R_CONSTRAINT_NAME IN 
         (SELECT CONSTRAINT_NAME 
          FROM   USER_CONSTRAINTS
          WHERE  TABLE_NAME = 'PORTS' 
                 AND 
                 CONSTRAINT_TYPE = 'P'
         )
;

(Author's note:  Here's a setup for the next script:

ALTER TABLE SHIPS 
RENAME CONSTRAINT FK_SH_PO TO FK_SHIPS_PORTS;

The above script allow you to run the next script.)

ALTER TABLE SHIPS 
DROP  CONSTRAINT FK_SHIPS_PORTS;

ALTER TABLE SHIPS 
ADD   CONSTRAINT FK_SHIPS_PORTS 
      FOREIGN KEY (HOME_PORT_ID)
      REFERENCES PORTS (PORT_ID) ON DELETE CASCADE;

ALTER TABLE SHIPS 
DROP  CONSTRAINT FK_SHIPS_PORTS;

ALTER TABLE SHIPS 
ADD   CONSTRAINT FK_SHIPS_PORTS 
      FOREIGN KEY (HOME_PORT_ID)
      REFERENCES PORTS (PORT_ID) ON DELETE SET NULL;

Page 451

ALTER TABLE SHIPS 
DROP  CONSTRAINT FK_SHIPS_PORTS;

ALTER TABLE SHIPS 
ADD   CONSTRAINT FK_SHIPS_PORTS 
      FOREIGN KEY (HOME_PORT_ID)
      REFERENCES PORTS (PORT_ID) DEFERRABLE;

SET CONSTRAINT FK_SHIPS_PORTS DEFERRED;

SET CONSTRAINT ALL DEFERRED;

SET CONSTRAINT FK_SHIPS_PORTS IMMEDIATE;

SET CONSTRAINT ALL IMMEDIATE;

Page 452

(Author's note:  Here's a setup for the next script:

ALTER TABLE CRUISE_ORDERS
RENAME CONSTRAINT PK_NEW_CONSTRAINT TO SYS_C0015489;

The above script allow you to run the next script.)

ALTER  TABLE CRUISE_ORDERS
RENAME CONSTRAINT SYS_C0015489 TO PK_CRUISE_ORDER_ID;

Page 453

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIPS;

The above script allow you to run the next script.)

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , HOME_PORT_ID NUMBER REFERENCES PORTS (PORT_ID)
);

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIPS;

The above script allow you to run the next script.)

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , HOME_PORT_ID NUMBER CONSTRAINT FK_SHIPS_PORTS
                       REFERENCES PORTS (PORT_ID)
);

(Author's note:  Here's a setup for the next script:

DROP TABLE SHIPS;

The above script allow you to run the next script.)

CREATE TABLE SHIPS
(  SHIP_ID NUMBER
 , HOME_PORT_ID NUMBER
 , CONSTRAINT FK_SHIPS_PORTS FOREIGN KEY (HOME_PORT_ID)
                             REFERENCES PORTS (PORT_ID)
);

Page 454

CREATE TABLE INVOICES 
(  INVOICE_ID NUMBER(11) PRIMARY KEY
 , INVOICE_DATE DATE
);

SELECT INDEX_NAME
FROM   USER_INDEXES
WHERE  TABLE_NAME = 'INVOICES'
;

Page 455

(Author's note:  Here's a setup for the next script:

DROP TABLE INVOICES;

The above script allow you to run the next script.)

CREATE TABLE INVOICES
(  INVOICE_ID NUMBER(11) PRIMARY KEY
                         USING INDEX (CREATE INDEX IX_INVOICES
                                      ON INVOICES(INVOICE_ID))
, INVOICE_DATE DATE
);

(Author's note:  Here's a setup for the next script:

DROP TABLE INVOICES;

The above script allow you to run the next script.)

CREATE TABLE INVOICES
(  INVOICE_ID NUMBER(11) CONSTRAINT PK_INVOICE_ID PRIMARY KEY
                         USING INDEX (CREATE INDEX IX_INVOICES
                                      ON INVOICES(INVOICE_ID))
, INVOICE_DATE DATE
);

Page 456

(Author's note:  Here's a setup for the next script:

DROP TABLE INVOICES;

The above script allow you to run the next script.)

CREATE TABLE INVOICES
(  INVOICE_ID NUMBER(11)
 , INVOICE_DATE DATE
 , CONSTRAINT CK_INVOICES_INVOICE_ID PRIMARY KEY (INVOICE_ID)
              USING INDEX (CREATE INDEX IX_INVOICES
                           ON INVOICES(INVOICE_ID))
);

(Author's note:  Here's a setup for the next script:

DROP TABLE INVOICES;

The above script allow you to run the next script.)

CREATE TABLE INVOICES
(  INVOICE_ID NUMBER(11)
 , INVOICE_DATE DATE
 , CONSTRAINT UN_INVOICES_INVOICE_ID UNIQUE 
              (INVOICE_ID, INVOICE_DATE)
              USING INDEX (CREATE INDEX IX_INVOICES
                          ON INVOICES(INVOICE_ID, INVOICE_DATE))
 , CONSTRAINT UN_INVOICES_INVOICE_DATE UNIQUE 
              (INVOICE_DATE, INVOICE_ID)
              USING INDEX IX_INVOICES
);

Page 457

CREATE TABLE CUSTOMERS
(  CUSTOMER_ID NUMBER(11) PRIMARY KEY
 , LAST_NAME VARCHAR2(30)
);

CREATE INDEX IX_CUSTOMERS_LAST_NAME 
       ON CUSTOMERS (UPPER(LAST_NAME))
;

(Author's note:  Here's a setup for the next script:

INSERT INTO CUSTOMERS VALUES (1, 'Jones');

INSERT INTO CUSTOMERS VALUES (2, 'Smith');

INSERT INTO CUSTOMERS VALUES (3, 'Johnson');

INSERT INTO CUSTOMERS VALUES (4, 'Adams');

COMMIT;

The above script allow you to run the next script.)

SELECT * 
FROM   CUSTOMERS 
WHERE  UPPER(LAST_NAME) = 'SMITH'
;

CREATE TABLE GAS_TANKS 
(  GAS_TANK_ID  NUMBER(7)
 , TANK_GALLONS NUMBER(9)
 , MILEAGE      NUMBER(9)
);

CREATE INDEX IX_GAS_TANKS_001 
       ON GAS_TANKS (TANK_GALLONS * MILEAGE);

Page 458

(Author's note:  Here's a setup for the next script:

INSERT INTO GAS_TANKS VALUES (1, 35, 100);

INSERT INTO GAS_TANKS VALUES (2, 15, 20);

INSERT INTO GAS_TANKS VALUES (3, 20, 1500);

INSERT INTO GAS_TANKS VALUES (4, 95, 300);

COMMIT;

The above script allow you to run the next script.)

SELECT * 
FROM   GAS_TANKS 
WHERE  MILEAGE*TANK_GALLONS > 750
;

Page 460

CREATE TABLE HOUDINI (VOILA VARCHAR2(30));

INSERT INTO HOUDINI (VOILA) VALUES ('Now you see it.');

COMMIT;

DROP TABLE HOUDINI;

FLASHBACK TABLE HOUDINI TO BEFORE DROP;

SELECT * FROM HOUDINI;

Page 461

SELECT * FROM USER_RECYCLEBIN;

SELECT * FROM RECYCLEBIN;

ALTER SESSION SET recyclebin = ON;

ALTER SESSION SET recyclebin = OFF;

Page 462

(Author's note:  Here's a setup for the next script:

ALTER SESSION SET recyclebin = ON;
DROP TABLE HOUDINI;

The above script allow you to run the next script.)

PURGE TABLE HOUDINI;

Page 463

(Author's note:  The next series of statements produces an error message at the end.  See the book for more information.)

CREATE TABLE HOUDINI (VOILA VARCHAR2(30));

INSERT INTO HOUDINI (VOILA) VALUES ('Now you see it.');

COMMIT;

EXECUTE DBMS_LOCK.SLEEP(15);

DELETE FROM HOUDINI;

COMMIT;

EXECUTE DBMS_LOCK.SLEEP(15);

FLASHBACK TABLE HOUDINI TO TIMESTAMP
SYSTIMESTAMP - INTERVAL '0 00:00:20' DAY TO SECOND;

Page 464

(Author's note:  Here's a setup for the next script:

DROP TABLE HOUDINI;

The above script allow you to run the next script.)

CREATE TABLE HOUDINI (VOILA VARCHAR2(30)) ENABLE ROW MOVEMENT;

ALTER TABLE HOUDINI ENABLE ROW MOVEMENT;

Page 465

SELECT DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER FROM DUAL;

Page 466

SELECT ORA_ROWSCN
     , VOILA
FROM   HOUDINI;

SELECT TO_TIMESTAMP(  '2009-08-25 13:15:08.232349'
                    , 'RRRR-MM-DD HH24:MI:SS:FF')
FROM   DUAL;

Page 467

(Author's note:  In order for the next statement to work, you will need to edit the date and time information to something that will work with your database. Look for the '01-AUG-09 09:12:23' in the script below, and change that to a date representing a time in which your database was operational.  For example, you could set the date to today's date, and put the time at about 20 minutes ago.)

SELECT TIMESTAMP_TO_SCN(SYSTIMESTAMP) NOW
     , TIMESTAMP_TO_SCN(
          TO_TIMESTAMP(  '01-AUG-09 09:12:23'
                       , 'DD-MON-RR HH:MI:SS')
                      ) NOT_NOW
FROM   DUAL;


SELECT TIMESTAMP_TO_SCN(SCN_TO_TIMESTAMP(5895585))
FROM   DUAL;

Page 468

(Author's note:  This page contains a set of statements that form a complete session.  Here I've added some SQL scripts to test the full concept being described here. For starters, run this script just in case you've already been through this set of scripts already:

DROP RESTORE POINT balance_acct_01;

Now you're ready to continue.)

CREATE RESTORE POINT balance_acct_01;

(Author's note:  Now run these:

	SELECT * FROM HOUDINI;

INSERT INTO HOUDINI VALUES ('New information');

COMMIT;

SELECT * FROM HOUDINI;

The above script give you the proper context to run the next script.)

FLASHBACK TABLE HOUDINI TO RESTORE POINT balance_acct_01;

(Author's note:  Now run this script to see the impact of the FLASHBACK TABLE script:

SELECT * FROM HOUDINI;

The newly added record is no longer there.)

DROP RESTORE POINT balance_acct_01;

Page 470

CREATE OR REPLACE DIRECTORY BANK_FILES AS 'F:\bnk_files\trnsfr';

Page 471

(Author's note:  The following excerpt from the book is intended to be created in a text file and placed on your hard drive:

ID  INV_DATE     ACCT_NO
--- ------------ --------------
701 03/15/09     CODDA009
702 03/17/09     CODDA010
703 03/18/09     CODDA011

For the next few scripts to work correctly, be sure to follow the instructions in the book to specify the correct file name and subdirectory location for this file.)

CREATE DIRECTORY INVOICE_FILES AS '\LOAD_INVOICES';

Page 472

CREATE TABLE INVOICES_EXTERNAL
(  INVOICE_ID CHAR(3)
 , INVOICE_DATE CHAR(9)
 , ACCOUNT_NUMBER CHAR(13)
)
ORGANIZATION EXTERNAL
  (TYPE ORACLE_LOADER
   DEFAULT DIRECTORY INVOICE_FILES
   ACCESS PARAMETERS
     (RECORDS DELIMITED BY NEWLINE
      SKIP 2
      FIELDS (  INVOICE_ID CHAR(3)
              , INVOICE_DATE CHAR(9)
              , ACCOUNT_NUMBER CHAR(13))
     )
   LOCATION ('INVOICE_DATA.TXT')
);

Page 473

(Author's note:  For the following script to produce anything meaningful, you will have to have created an external data file and identified it correctly, as described on page 471.)

SELECT * FROM INVOICES_EXTERNAL;

Page 474

(Author's note:  For the following script to produce anything meaningful, you will have to have created an external data file and identified it correctly, as described on page 471.)

SELECT  TO_NUMBER(INVOICE_ID)
      , TO_DATE(INVOICE_DATE,'MM/DD/RR') INVOICE_DATE
      , LTRIM(ACCOUNT_NUMBER,' ') ACCOUNT_NUMBER
FROM    INVOICES_EXTERNAL
;

12. Using the Set Operators

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE CONTACT_EMAILS
REM

CREATE TABLE CONTACT_EMAILS
(  CONTACT_EMAIL_ID    NUMBER(4)
 , CRUISE_CUSTOMER_ID  NUMBER
 , EMAIL_ADDRESS       VARCHAR2(95)
 , EMAIL_TYPE          VARCHAR2(10)
 , STATUS              VARCHAR2(7)
 , CONSTRAINT PK_CONTACT_EMAIL_ID 
              PRIMARY KEY (CONTACT_EMAIL_ID)
);

REM
REM CREATE TABLE ONLINE_SUBSCRIBERS
REM

CREATE TABLE ONLINE_SUBSCRIBERS
(
   ONLINE_SUBSCRIBER_ID NUMBER
 , SUB_DATE             DATE
 , EMAIL                VARCHAR2(120)
 , FIRSTNAME            VARCHAR2(20)
 , LASTNAME             VARCHAR2(30)
 , COMPANY              VARCHAR2(30)
 , CONSTRAINT           PK_ONLINE_SUBSCRIBER_ID
                        PRIMARY KEY (ONLINE_SUBSCRIBER_ID)
);

REM
REM CREATE TABLE CRUISE_CUSTOMERS
REM

CREATE TABLE CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID   NUMBER
 , FIRST_NAME           VARCHAR2(20)
 , LAST_NAME            VARCHAR2(30)
 , CONSTRAINT PK_CRUISE_CUSTOMER_ID 
              PRIMARY KEY (CRUISE_CUSTOMER_ID)
);

REM
REM CREATE TABLE VENDORS
REM

CREATE TABLE VENDORS
(  VENDOR_ID           NUMBER
 , VENDOR_NAME         VARCHAR2(20)
 , STATUS              NUMBER(3)
 , CATEGORY            VARCHAR2(10)
 , CONSTRAINT          PK_VENDOR_ID
                       PRIMARY KEY (VENDOR_ID)
);

REM
REM CREATE SEQUENCE SEQ_CONTACT_EMAIL_ID
REM

CREATE SEQUENCE SEQ_CONTACT_EMAIL_ID;

REM
REM CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID
REM

CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID
REM

CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

REM
REM CREATE SEQUENCE SEQ_VENDOR_ID
REM

CREATE SEQUENCE SEQ_VENDOR_ID;

REM
REM INSERT INTO CRUISE_CUSTOMERS AND CONTACT_EMAILS 
REM

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'Nada'
 , 'Gilbert'
);

INSERT INTO CONTACT_EMAILS
(  CONTACT_EMAIL_ID
 , CRUISE_CUSTOMER_ID
 , EMAIL_ADDRESS
 , EMAIL_TYPE
 , STATUS
) VALUES (
   SEQ_CONTACT_EMAIL_ID.NEXTVAL
 , SEQ_CRUISE_CUSTOMER_ID.CURRVAL
 , 'bubblegum@tlivecar.com'
 , 'Work'
 , 'Opt Out'
);

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'Nora'
 , 'MacCaulay'
);

INSERT INTO CONTACT_EMAILS
(  CONTACT_EMAIL_ID
 , CRUISE_CUSTOMER_ID
 , EMAIL_ADDRESS
 , EMAIL_TYPE
 , STATUS
) VALUES (
   SEQ_CONTACT_EMAIL_ID.NEXTVAL
 , SEQ_CRUISE_CUSTOMER_ID.CURRVAL
 , 'nora@astann.com'
 , 'Home'
 , 'Valid'
);

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME
) VALUES (
   SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
 , 'William'
 , 'Bryant'
);

INSERT INTO CONTACT_EMAILS
(  CONTACT_EMAIL_ID
 , CRUISE_CUSTOMER_ID
 , EMAIL_ADDRESS
 , EMAIL_TYPE
 , STATUS
) VALUES (
   SEQ_CONTACT_EMAIL_ID.NEXTVAL
 , SEQ_CRUISE_CUSTOMER_ID.CURRVAL
 , 'watcher@foursigma.org'
 , 'Work'
 , 'Valid'
);

REM
REM INSERT INTO ONLINE_SUBSCRIBERS 
REM

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '12-DEC-08'
 , 'pendicott77@kasteelinc.com'
 , 'EDGAR'
 , 'KLINE'
 , 'KLINE AND ASSOCIATES'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '09-APR-09'
 , 'watcher@foursigma.org'
 , 'bill'
 , 'bryant'
 , 'Gold International'
); 

INSERT INTO ONLINE_SUBSCRIBERS
(  ONLINE_SUBSCRIBER_ID
 , SUB_DATE
 , EMAIL
 , FIRSTNAME
 , LASTNAME
 , COMPANY)
VALUES
(  SEQ_ONLINE_SUBSCRIBER_ID.NEXTVAL
 , '09-APR-09'
 , 'hardingpal@ckofca.com'
 , 'Ned'
 , 'McLean'
 , 'Harding Company'
); 

REM
REM INSERT INTO VENDORS
REM

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Steaks', 17, 'Partner');

INSERT INTO VENDORS 
  (VENDOR_ID, VENDOR_NAME, STATUS, CATEGORY)
  VALUES
  (SEQ_VENDOR_ID.NEXTVAL, 'Acme Poker Chips', NULL, 'Supplier');

COMMIT;

You are ready to begin.
Page 491

SELECT   CONTACT_EMAIL_ID
       , STATUS
       , EMAIL_ADDRESS
FROM     CONTACT_EMAILS;

SELECT   ONLINE_SUBSCRIBER_ID
       , EMAIL
FROM     ONLINE_SUBSCRIBERS;

Page 492

SELECT   CONTACT_EMAIL_ID
       , EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
         UNION
SELECT   ONLINE_SUBSCRIBER_ID
       , EMAIL
FROM     ONLINE_SUBSCRIBERS
;

Page 493

SELECT   EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
UNION
SELECT   EMAIL
FROM     ONLINE_SUBSCRIBERS
;

Page 494

SELECT   EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
UNION ALL
SELECT   EMAIL
FROM     ONLINE_SUBSCRIBERS
;

SELECT   EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
INTERSECT
SELECT   EMAIL
FROM     ONLINE_SUBSCRIBERS
;

Page 495

SELECT   EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
MINUS
SELECT   EMAIL
FROM     ONLINE_SUBSCRIBERS
;

SELECT   EMAIL
FROM     ONLINE_SUBSCRIBERS
MINUS
SELECT   EMAIL_ADDRESS
FROM     CONTACT_EMAILS
WHERE    STATUS = 'Valid'
;

Page 497

SELECT   'Individual'
       , LAST_NAME || ', ' || FIRST_NAME
FROM     CRUISE_CUSTOMERS
UNION
SELECT   CATEGORY
       , VENDOR_NAME
FROM     VENDORS
;

Page 498

SELECT   'Individual'
       , LAST_NAME || ', ' || FIRST_NAME
FROM     CRUISE_CUSTOMERS
UNION
SELECT   CATEGORY
       , VENDOR_NAME
FROM     VENDORS
ORDER BY 2
;

Page 499

SELECT   'Individual' CONTACT_CATEGORY
       , LAST_NAME || ', ' || FIRST_NAME POINT_OF_CONTACT
FROM     CRUISE_CUSTOMERS
UNION
SELECT   CATEGORY
       , VENDOR_NAME
FROM     VENDORS
ORDER BY POINT_OF_CONTACT
;

13. Generating Reports by Grouping Related Data

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Balcony',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'Balcony' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'Balcony' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Balcony',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'Ocean' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'Ocean' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 701        , 'Suite'    , 'Presidential', 'Balcony',    5,  1142, 476);


INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Balcony' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Balcony' ,      8,   722, 410);

COMMIT;

You are ready to begin.
Page 513

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),0) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROOM_STYLE
       , ROOM_TYPE
ORDER BY ROOM_STYLE
       , ROOM_TYPE
;

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROLLUP (ROOM_STYLE, ROOM_TYPE)
ORDER BY ROOM_STYLE
       , ROOM_TYPE
;

Page 514

SELECT   WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY WINDOW
       , ROLLUP (ROOM_STYLE, ROOM_TYPE)
ORDER BY WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
;

Page 516

SELECT   ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY CUBE (ROOM_STYLE, ROOM_TYPE)
ORDER BY ROOM_STYLE, ROOM_TYPE
;

Page 517

SELECT   GROUPING(ROOM_TYPE)
       , ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROLLUP (ROOM_STYLE, ROOM_TYPE)
ORDER BY ROOM_STYLE
       , ROOM_TYPE
;

Page 518

SELECT   NVL(
             DECODE(  GROUPING(ROOM_TYPE)
                    , 1
                    , UPPER(ROOM_STYLE)
                    , INITCAP(ROOM_STYLE)
                   )
          , 'GRAND TOTAL') ROOM_STYLE_FORMATTED
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY ROLLUP (ROOM_STYLE, ROOM_TYPE)
ORDER BY ROOM_STYLE
       , ROOM_TYPE
;

Page 519

SELECT   WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY CUBE(WINDOW, ROOM_STYLE, ROOM_TYPE)
ORDER BY WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
;

Page 520

SELECT   WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
       , ROUND(SUM(SQ_FT),2) SUM_SQ_FT
FROM     SHIP_CABINS
WHERE    SHIP_ID = 1
GROUP BY GROUPING SETS((WINDOW, ROOM_STYLE),(ROOM_TYPE),NULL)
ORDER BY WINDOW
       , ROOM_STYLE
       , ROOM_TYPE
;




14. Managing Objects with Data Dictionary Views

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE POSITIONS
REM

CREATE TABLE POSITIONS
(  POSITION_ID         NUMBER(4)
 , POSITION            VARCHAR2(20)
 , REPORTS_TO          NUMBER
 , EXEMPT              CHAR(1)
 , MIN_SALARY          NUMBER(10,2)
 , MAX_SALARY          NUMBER(10,2)
 , CONSTRAINT          PK_POSITIONS 
                       PRIMARY KEY (POSITION_ID)
);

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM ALTER TABLE PORTS
REM

ALTER TABLE PORTS ADD TOT_SHIPS_ASSIGNED NUMBER(7);
ALTER TABLE PORTS ADD TOT_SHIPS_ASGN_CAP NUMBER(7);

REM
REM CREATE TABLE SHIPS
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE CRUISES
REM

CREATE TABLE CRUISES
(  CRUISE_ID           NUMBER
 , CRUISE_TYPE_ID      NUMBER
 , CRUISE_NAME         VARCHAR2(20)
 , SHIP_ID             NUMBER(7)
 , CAPTAIN_ID          NUMBER
 , START_DATE          DATE
 , END_DATE            DATE
 , STATUS              VARCHAR2(5)
 , CONSTRAINT          PK_CRUISE 
                       PRIMARY KEY (CRUISE_ID)
);

REM
REM CREATE TABLE CRUISE_TYPES
REM

CREATE TABLE CRUISE_TYPES
(  CRUISE_TYPE_ID      NUMBER
 , CRUISE_TYPE         VARCHAR(20)
 , CRUISE_LENGTH       NUMBER
 , CONSTRAINT          PK_CRUISE_TYPE_ID 
                       PRIMARY KEY (CRUISE_TYPE_ID)
);

REM
REM CREATE TABLE WORK_HISTORY
REM

CREATE TABLE WORK_HISTORY
(  WORK_HISTORY_ID    NUMBER
 , EMPLOYEE_ID         NUMBER
 , START_DATE          DATE
 , END_DATE            DATE
 , SHIP_ID             NUMBER(7)
 , STATUS              VARCHAR2(10)
 , CONSTRAINT          PK_WORK_HISTORY 
                       PRIMARY KEY (WORK_HISTORY_ID)
);

REM
REM CREATE TABLE ERRORS
REM

CREATE TABLE ERRORS
(  ERROR_ID            NUMBER
 , MESSAGE             VARCHAR2(80)
 , CONSTRAINT          PK_ERROR 
                       PRIMARY KEY (ERROR_ID)
);

REM
REM CREATE TABLE PAY_HISTORY
REM

CREATE TABLE PAY_HISTORY
(  PAY_HISTORY_ID      NUMBER
 , EMPLOYEE_ID         NUMBER
 , SALARY              NUMBER(10,2)
 , START_DATE          DATE
 , END_DATE            DATE
 , CONSTRAINT          PK_PAY_HISTORY_ID 
                       PRIMARY KEY (PAY_HISTORY_ID)
);

REM
REM CREATE TABLE VENDORS
REM

CREATE TABLE VENDORS
(  VENDOR_ID           NUMBER
 , VENDOR_NAME         VARCHAR2(20)
 , STATUS              NUMBER(3)
 , CATEGORY            VARCHAR2(10)
 , CONSTRAINT          PK_VENDOR_ID
                       PRIMARY KEY (VENDOR_ID)
);

REM
REM CREATE TABLE PROJECTS
REM

CREATE TABLE PROJECTS
(  PROJECT_ID          NUMBER
 , SHIP_ID             NUMBER(7)
 , PURPOSE             VARCHAR2(30)
 , PROJECT_NAME        VARCHAR2(40)
 , PROJECT_COST        NUMBER
 , DAYS                NUMBER
 , CONSTRAINT          PK_PROJECT_ID
                       PRIMARY KEY (PROJECT_ID)
 , CONSTRAINT          CK_PROJECT_COST 
                       CHECK (PROJECT_COST < 1000000)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE ADDRESSES
REM

CREATE TABLE ADDRESSES
(
   ADDRESS_ID          NUMBER
 , EMPLOYEE_ID         NUMBER
 , STREET_ADDRESS      VARCHAR2(40)
 , STREET_ADDRESS2     VARCHAR2(40)
 , CITY                VARCHAR2(30)
 , STATE               VARCHAR2(2)
 , ZIP                 VARCHAR2(5)
 , ZIP_PLUS            VARCHAR2(4)
 , COUNTRY             VARCHAR2(20)
 , CONTACT_EMAIL       VARCHAR2(80)
 , CONSTRAINT          PK_ADDRESS_ID
                       PRIMARY KEY (ADDRESS_ID)
);

REM
REM CREATE TABLE ONLINE_SUBSCRIBERS
REM

CREATE TABLE ONLINE_SUBSCRIBERS
(
   ONLINE_SUBSCRIBER_ID NUMBER
 , SUB_DATE             DATE
 , EMAIL                VARCHAR2(120)
 , FIRSTNAME            VARCHAR2(20)
 , LASTNAME             VARCHAR2(30)
 , COMPANY              VARCHAR2(30)
 , CONSTRAINT           PK_ONLINE_SUBSCRIBER_ID
                        PRIMARY KEY (ONLINE_SUBSCRIBER_ID)
);

REM
REM CREATE TABLE CRUISE_CUSTOMERS
REM

CREATE TABLE CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID   NUMBER
 , FIRST_NAME           VARCHAR2(20)
 , LAST_NAME            VARCHAR2(30)
 , CONSTRAINT PK_CRUISE_CUSTOMER_ID 
              PRIMARY KEY (CRUISE_CUSTOMER_ID)
);

REM
REM CREATE TABLE CONTACT_EMAILS
REM

CREATE TABLE CONTACT_EMAILS
(  CONTACT_EMAIL_ID    NUMBER(4)
 , CRUISE_CUSTOMER_ID  NUMBER
 , EMAIL_ADDRESS       VARCHAR2(95)
 , EMAIL_TYPE          VARCHAR2(10)
 , STATUS              VARCHAR2(7)
 , CONSTRAINT PK_CONTACT_EMAIL_ID 
              PRIMARY KEY (CONTACT_EMAIL_ID)
);

REM
REM CREATE TABLE CRUISE_ORDERS
REM

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID      NUMBER
 , ORDER_DATE           DATE
 , POSTING_DATE         DATE
 , CRUISE_CUSTOMER_ID   NUMBER
 , SHIP_ID              NUMBER(7)
 , CONSTRAINT PK_CRUISE_ORDER_ID 
              PRIMARY KEY (CRUISE_ORDER_ID)
);

REM
REM CREATE TABLE INVOICES
REM

CREATE TABLE INVOICES
(  INVOICE_ID          NUMBER
 , INVOICE_DATE        DATE
 , ACCOUNT_NUMBER      VARCHAR2(80)
 , TERMS_OF_DISCOUNT   VARCHAR2(20)
 , VENDOR_ID           NUMBER
 , TOTAL_PRICE         NUMBER(8,2)
 , SHIPPING_DATE       DATE
 , CONSTRAINT PK_INVOICE_ID PRIMARY KEY (INVOICE_ID)
);

REM
REM CREATE TABLE WO_INV
REM

CREATE TABLE WO_INV
(INV_NO           NUMBER(11) PRIMARY KEY,
 DATE_ENTERED     DATE,
 DATE_SHIPPED     DATE,
 CUST_ACCT        VARCHAR2(30));
CREATE TABLE SHIP_CABIN_GRID AS
SELECT UPPER(ROOM_TYPE) ROOM_TYPE, ROUND(OCEAN) OCEAN, ROUND(BALCONY) BALCONY, ROUND(NONE) NO_WINDOW
FROM   (SELECT ROOM_TYPE, WINDOW, SQ_FT FROM SHIP_CABINS) 
PIVOT 
(
  AVG(SQ_FT) FOR WINDOW IN ('Ocean' AS OCEAN, 
                            'Balcony' AS BALCONY, 'None' AS NONE)
 );

REM
REM CREATE TABLE WWA_INVOICES
REM

CREATE TABLE WWA_INVOICES
(INV_ID   NUMBER(7) PRIMARY KEY,
 CUST_PO  VARCHAR2(10),
 INV_DATE DATE,
 NOTES    VARCHAR2(200));

REM
REM CREATE TABLE ONTARIO_ORDERS
REM

CREATE TABLE ONTARIO_ORDERS
(ORDER_NUM   NUMBER(11) PRIMARY KEY,
 PO_NUM      VARCHAR2(20),
 SALES_REP   VARCHAR2(20));

REM
REM CREATE TABLE SHIP_INVENTORY
REM

CREATE TABLE SHIP_INVENTORY
(  NUM          NUMBER
 , AISLE        VARCHAR2(7)
 , PRODUCT      VARCHAR2(15)
 , LAST_ORDER   DATE
 , CONSTRAINT   PK_SHIP_INV_NUM PRIMARY KEY (NUM)
);

REM
REM CREATE TABLE PORT_INVENTORY
REM

CREATE TABLE PORT_INVENTORY
(  NUM          NUMBER
 , AISLE        VARCHAR2(7)
 , PRODUCT      VARCHAR2(15)
 , LAST_ORDER   DATE
 , CONSTRAINT   PK_PORT_INV_NUM PRIMARY KEY (NUM)
);

REM
REM CREATE TABLE EMPLOYEE_CHART
REM

CREATE TABLE EMPLOYEE_CHART
(  EMPLOYEE_ID  NUMBER(7) PRIMARY KEY, 
   TITLE        VARCHAR2(20), 
   REPORTS_TO   NUMBER(7));

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_POSITION_ID
REM

CREATE SEQUENCE SEQ_POSITION_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_TYPE_ID
REM

CREATE SEQUENCE SEQ_CRUISE_TYPE_ID;

REM
REM CREATE SEQUENCE SEQ_PAY_HISTORY_ID
REM

CREATE SEQUENCE SEQ_PAY_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_PROJECT_ID
REM

CREATE SEQUENCE SEQ_PROJECT_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_WORK_HISTORY_ID
REM

CREATE SEQUENCE SEQ_WORK_HISTORY_ID;

REM
REM CREATE SEQUENCE SEQ_ADDRESS_ID
REM

CREATE SEQUENCE SEQ_ADDRESS_ID;

REM
REM CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID
REM

CREATE SEQUENCE SEQ_ONLINE_SUBSCRIBER_ID;

REM
REM CREATE SEQUENCE SEQ_VENDOR_ID
REM

CREATE SEQUENCE SEQ_VENDOR_ID;

REM
REM CREATE TABLE BRANCH_OFFICE_ACCOUNTS
REM

CREATE TABLE BRANCH_OFFICE_ACCOUNTS
(ACCOUNT_ID  NUMBER,
 CRUISE_NAME VARCHAR2(30),
 START_DATE  DATE,
 END_DATE    DATE
 );

REM
REM CREATE SEQUENCE SEQ_ACCOUNT_ID
REM

CREATE SEQUENCE SEQ_ACCOUNT_ID;

REM
REM CREATE TABLE BOOK_CONTENTS
REM

CREATE TABLE BOOK_CONTENTS
(  BOOK_CONTENT_ID   NUMBER
 , CHAPTER_TITLE     VARCHAR2(30)
 , PAGE_NUMBER       NUMBER(4)
);

REM
REM CREATE SEQUENCE SEQ_BOOK_CONTENT_ID
REM

CREATE SEQUENCE SEQ_BOOK_CONTENT_ID;

REM
REM CREATE TABLE ORDER_ADDRESSES
REM

CREATE TABLE ORDER_ADDRESSES
(  ORDER_ADDRESS_ID NUMBER
 , ADDRESS1         VARCHAR2(40)
 , ADDRESS2         VARCHAR2(40)
);

REM
REM CREATE SEQUENCE SEQ_ORDER_ADDRESS_ID
REM

CREATE SEQUENCE SEQ_ORDER_ADDRESS_ID;

REM
REM CREATE TABLE SCORES
REM

CREATE TABLE SCORES(
   SCORE_ID NUMBER
 , TEST_SCORE VARCHAR2(5)
 , UPDATED_TEST_SCORE VARCHAR2(5)
 , CONSTRAINT PK_SCORE_ID PRIMARY KEY (SCORE_ID)
);

REM
REM CREATE SEQUENCE SEQ_SCORE_ID
REM

CREATE SEQUENCE SEQ_SCORE_ID;

REM
REM CREATE TABLE GRADING
REM

CREATE TABLE GRADING(
   GRADING_ID NUMBER
 , GRADE      CHAR(1)
 , SCORE_MIN  NUMBER(3)
 , SCORE_MAX  NUMBER(3)
 , CONSTRAINT PK_GRADING_ID PRIMARY KEY (GRADING_ID)
);

REM
REM CREATE SEQUENCE SEQ_GRADING_ID
REM

CREATE SEQUENCE SEQ_GRADING_ID;

REM
REM CREATE TABLE STORE_INVENTORY
REM

CREATE TABLE STORE_INVENTORY
(  NUM         NUMBER
 , AISLE       VARCHAR2(7)
 , PRODUCT     VARCHAR2(15)
 , LAST_ORDER  VARCHAR2(12)
 , CONSTRAINT  PK_NUM PRIMARY KEY (NUM)
);


REM
REM CREATE SEQUENCE SEQ_NUM; 
REM

CREATE SEQUENCE SEQ_NUM;

REM
REM CREATE TABLE FURNISHINGS
REM

CREATE TABLE FURNISHINGS
(  CAT#        NUMBER
 , ITEM_NAME   VARCHAR2(15)
 , ADDED       DATE
 , SECTION     VARCHAR2(10)
 , CONSTRAINT  PK_CAT# PRIMARY KEY (CAT#)
);

REM
REM CREATE SEQUENCE SEQ_CAT#;
REM

CREATE SEQUENCE SEQ_CAT#;

REM
REM CREATE TABLE DISTRIBUTORS
REM

CREATE TABLE DISTRIBUTORS
(  ID       NUMBER(3) PRIMARY KEY
 , LOCATION VARCHAR2(20)
 , LOC_TYPE VARCHAR2(10)
 , UPLINE   NUMBER(3)
);

REM
REM CREATE TABLE DECKS
REM

CREATE TABLE DECKS
(  DECK_ID    NUMBER(3) PRIMARY KEY
 , SHIP_ID    NUMBER(7)
 , DECK_NAME  VARCHAR2(20));

REM
REM CREATE SEQUENCE SEQ_DECK_ID 
REM

CREATE SEQUENCE SEQ_DECK_ID;

REM
REM CREATE TABLE PROVISIONS
REM

CREATE TABLE PROVISIONS
(  PROVISION_ID NUMBER(5) PRIMARY KEY
 , CATEGORY     VARCHAR2(15)
 , DECK_ID      NUMBER(3)
 , PRODUCT      VARCHAR2(25)
 , QTY          NUMBER(5)
);

REM
REM CREATE SEQUENCE SEQ_PROVISION_ID
REM

CREATE SEQUENCE SEQ_PROVISION_ID;

REM
REM CREATE VIEW VW_EMPLOYEES
REM

CREATE VIEW VW_EMPLOYEES AS
       SELECT EMPLOYEE_ID
            , LAST_NAME
            , FIRST_NAME
            , PRIMARY_PHONE
       FROM   EMPLOYEES;

REM
REM CREATE VIEW EMP_TREND
REM

CREATE VIEW EMP_TREND AS
       SELECT EMP.SHIP_ID
            , MIN(SALARY) MIN_SALARY
       FROM   EMPLOYEES EMP LEFT JOIN PAY_HISTORY PAY
              ON EMP.EMPLOYEE_ID = PAY.EMPLOYEE_ID
       WHERE  END_DATE IS NULL
       GROUP BY EMP.SHIP_ID
;

REM
REM CREATE SYNONYM ACCT_01
REM

CREATE SYNONYM ACCT_01 FOR LAB_RESULTS;

REM
REM ALTER TABLE EMPLOYEES
REM

ALTER TABLE EMPLOYEES MODIFY LAST_NAME VARCHAR2(35);

REM
REM ALTER TABLE PAY_HISTORY
REM

ALTER TABLE PAY_HISTORY MODIFY SALARY NUMBER(11,2);

REM
REM ALTER TABLE CRUISES
REM

ALTER TABLE CRUISES
ADD CONSTRAINT FK_CRUISES_CRUISE_TYPES
  FOREIGN KEY (CRUISE_TYPE_ID)
  REFERENCES CRUISE_TYPES (CRUISE_TYPE_ID);

ALTER TABLE CRUISES
ADD CONSTRAINT FK_CRUISES_SHIPS
  FOREIGN KEY (SHIP_ID)
  REFERENCES SHIPS (SHIP_ID);

ALTER TABLE CRUISES
ADD CONSTRAINT FK_CRUISES_EMPLOYEES
  FOREIGN KEY (CAPTAIN_ID)
  REFERENCES EMPLOYEES (EMPLOYEE_ID);

COMMIT;

You are ready to begin.
Page 540

SELECT '*TABLE: ' || TABLE_NAME
     , COMMENTS
FROM   ALL_TAB_COMMENTS
WHERE  OWNER = 'SYS'
       AND 
       TABLE_NAME = 'USER_SYNONYMS'
UNION
SELECT 'COL: ' || COLUMN_NAME
     , COMMENTS
FROM   ALL_COL_COMMENTS
WHERE  OWNER = 'SYS'
       AND
       TABLE_NAME = 'USER_SYNONYMS'
;

Page 541

COMMENT ON TABLE PORTS
IS 'Listing of all ports of departure and arrival.';

SELECT COMMENTS
FROM   USER_TAB_COMMENTS
WHERE  TABLE_NAME = 'PORTS'
;

Page 542

COMMENT ON COLUMN PORTS.CAPACITY
IS 'Maximum number of passengers (exclusive of crew).';

COMMENT ON TABLE PORTS IS '';

DESC DICTIONARY;

SELECT   TABLE_NAME
       , COMMENTS
FROM     DICTIONARY
ORDER BY TABLE_NAME
;

Page 543

SELECT   TABLE_NAME
       , COMMENTS
FROM     DICTIONARY
WHERE    UPPER(COMMENTS) LIKE '%INDEX%'
ORDER BY TABLE_NAME
;

SELECT   COLUMN_NAME
       , COMMENTS
FROM     ALL_COL_COMMENTS
WHERE    OWNER = 'SYS'
         AND 
         TABLE_NAME = 'USER_DEPENDENCIES'
;

Page 544

SELECT   TABLE_TYPE
       , COUNT(*)
FROM     USER_CATALOG
GROUP BY TABLE_TYPE
;

Page 545

SELECT   COLUMN_NAME
       , DECODE(  DATA_TYPE
                , 'DATE' 
                , DATA_TYPE 
                , 'NUMBER' 
                , DATA_TYPE || DECODE(  DATA_SCALE
                                      , NULL
                                      , NULL
                                      , '(' || DATA_PRECISION 
                                            || ',' 
                                            || DATA_SCALE 
                                            || ')'
                                      )
               , 'VARCHAR2'
               , DATA_TYPE || '(' || DATA_LENGTH || ')', NULL
               )
DATA_TYPE
FROM     USER_TAB_COLUMNS
WHERE    TABLE_NAME = 'INVOICES'
;

Page 546

SELECT   STATUS
       , OBJECT_TYPE
       , OBJECT_NAME
FROM     USER_OBJECTS
WHERE    STATUS = 'INVALID'
ORDER BY OBJECT_NAME
;

SELECT   TEXT
FROM     USER_VIEWS
WHERE    VIEW_NAME = 'VW_EMPLOYEES'
;

Page 547

SELECT   CONSTRAINT_NAME
       , CONSTRAINT_TYPE
       , R_CONSTRAINT_NAME
       , STATUS
FROM     USER_CONSTRAINTS
WHERE    TABLE_NAME = 'CRUISES'
;

Page 548

SELECT   SEARCH_CONDITION
FROM     USER_CONSTRAINTS
WHERE    CONSTRAINT_NAME = 'CK_PROJECT_COST'
         AND 
         CONSTRAINT_TYPE = 'C'
;

Page 549

SELECT   TABLE_NAME
FROM     USER_TAB_COLUMNS
WHERE    COLUMN_NAME = 'EMPLOYEE_ID'
;



15. Manipulating Large Data Sets

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE INVOICES
REM

CREATE TABLE INVOICES
(  INVOICE_ID          NUMBER
 , INVOICE_DATE        DATE
 , ACCOUNT_NUMBER      VARCHAR2(80)
 , TERMS_OF_DISCOUNT   VARCHAR2(20)
 , VENDOR_ID           NUMBER
 , TOTAL_PRICE         NUMBER(8,2)
 , SHIPPING_DATE       DATE
 , CONSTRAINT PK_INVOICE_ID PRIMARY KEY (INVOICE_ID)
);

REM
REM CREATE TABLE SHIPS
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE SHIP_CABINS
REM

CREATE TABLE SHIP_CABINS
(  SHIP_CABIN_ID       NUMBER
 , SHIP_ID             NUMBER(7)
 , ROOM_NUMBER         VARCHAR2(5)
 , ROOM_STYLE          VARCHAR2(10)
 , ROOM_TYPE           VARCHAR2(20)
 , WINDOW              VARCHAR2(10)
 , GUESTS              NUMBER(3)
 , SQ_FT               NUMBER(6)
 , BALCONY_SQ_FT       NUMBER(6)
 , CONSTRAINT          PK_SHIP_CABIN_ID 
                       PRIMARY KEY (SHIP_CABIN_ID)
 , CONSTRAINT          CK_WINDOW 
                       CHECK (WINDOW IN ('Ocean',
                              'Balcony', 'None'))
);

REM
REM CREATE TABLE CRUISE_CUSTOMERS
REM

CREATE TABLE CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID   NUMBER
 , FIRST_NAME           VARCHAR2(20)
 , LAST_NAME            VARCHAR2(30)
 , CONSTRAINT PK_CRUISE_CUSTOMER_ID 
              PRIMARY KEY (CRUISE_CUSTOMER_ID)
);

REM
REM CREATE TABLE EMPLOYEES
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE PORTS
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , TOT_SHIPS_ASSIGNED  NUMBER(7)
 , TOT_SHIPS_ASGN_CAP  NUMBER(7)
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE CRUISE_ORDERS
REM

CREATE TABLE CRUISE_ORDERS
(  CRUISE_ORDER_ID      NUMBER
 , ORDER_DATE           DATE
 , CRUISE_CUSTOMER_ID   NUMBER
 , SHIP_ID              NUMBER(7)
 , CONSTRAINT PK_CRUISE_ORDER_ID 
              PRIMARY KEY (CRUISE_ORDER_ID)
);

REM
REM CREATE TABLE CO_2008
REM

CREATE TABLE CO_2008 AS SELECT * FROM CRUISE_ORDERS;

REM
REM CREATE TABLE CO_ELCARO (ORACLE BACKWARDS)
REM

CREATE TABLE CO_ELCARO AS SELECT * FROM CRUISE_ORDERS;

REM
REM CREATE TABLE CO_ARCHIVED
REM

CREATE TABLE CO_ARCHIVED AS SELECT * FROM CRUISE_ORDERS;

REM
REM CREATE TABLE WO_INV 
REM

CREATE TABLE WO_INV
(INV_NO           NUMBER(11) PRIMARY KEY,
 DATE_ENTERED     DATE,
 DATE_SHIPPED     DATE,
 CUST_ACCT        VARCHAR2(30));

REM
REM CREATE TABLE INVOICES_THRU_2009
REM

CREATE TABLE INVOICES_THRU_2009 AS SELECT * FROM INVOICES;

REM
REM CREATE TABLE INVOICE_THRU_2008
REM

CREATE TABLE INVOICES_THRU_2008 AS SELECT * FROM INVOICES;

REM
REM CREATE TABLE INVOICES_THRU_2007
REM

CREATE TABLE INVOICES_THRU_2007 AS SELECT * FROM INVOICES;

REM
REM CREATE TABLE INVOICES_CLOSED
REM

CREATE TABLE INVOICES_CLOSED AS SELECT * FROM INVOICES;

REM
REM CREATE TABLE SALARY_CHART
REM

CREATE TABLE SALARY_CHART
(ORG_ID      NUMBER(7),
 EMP_TITLE   VARCHAR2(30),
 EMP_INCOME  NUMBER(10,2),
 SUPERIOR    VARCHAR2(30),
 SUP_INCOME  NUMBER(10,2)
);

REM
REM CREATE TABLE POSITIONS
REM

CREATE TABLE POSITIONS
(  POSITION_ID         NUMBER(4)
 , POSITION            VARCHAR2(20)
 , REPORTS_TO          NUMBER
 , EXEMPT              CHAR(1)
 , MIN_SALARY          NUMBER(10,2)
 , MAX_SALARY          NUMBER(10,2)
 , CONSTRAINT          PK_POSITIONS 
                       PRIMARY KEY (POSITION_ID)
);

REM
REM CREATE TABLE SHIP_CABIN_STATISTICS
REM

CREATE TABLE SHIP_CABIN_STATISTICS
(SC_ID       NUMBER(7),
 ROOM_TYPE   VARCHAR2(20),
 WINDOW_TYPE VARCHAR2(10),
 SQ_FT       NUMBER(8)
);

REM
REM CREATE TABLE WWA_INVOICES
REM

CREATE TABLE WWA_INVOICES
(INV_ID   NUMBER(7) PRIMARY KEY,
 CUST_PO  VARCHAR2(10),
 INV_DATE DATE,
 NOTES    VARCHAR2(200));

REM
REM CREATE TABLE ONTARIO_ORDERS
REM

CREATE TABLE ONTARIO_ORDERS
(ORDER_NUM   NUMBER(11) PRIMARY KEY,
 PO_NUM      VARCHAR2(20),
 SALES_REP   VARCHAR2(20));

REM
REM CREATE SEQUENCE SEQ_SHIP_ID
REM

CREATE SEQUENCE SEQ_SHIP_ID;

REM
REM CREATE SEQUENCE SEQ_SHIP_CABIN_ID
REM

CREATE SEQUENCE SEQ_SHIP_CABIN_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID
REM

CREATE SEQUENCE SEQ_CRUISE_CUSTOMER_ID;

REM
REM CREATE SEQUENCE SEQ_EMPLOYEE_ID
REM

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

REM
REM CREATE SEQUENCE SEQ_PORT_ID
REM

CREATE SEQUENCE SEQ_PORT_ID;

REM
REM CREATE SEQUENCE SEQ_CRUISE_ORDER_ID
REM

CREATE SEQUENCE SEQ_CRUISE_ORDER_ID;

REM
REM CREATE SEQUENCE SEQ_INVOICE_ID
REM

CREATE SEQUENCE SEQ_INVOICE_ID;

REM
REM CREATE SEQUENCE SEQ_INV_NO
REM

CREATE SEQUENCE SEQ_INV_NO;

REM
REM CREATE SEQUENCE SEQ_POSITION_ID
REM

CREATE SEQUENCE SEQ_POSITION_ID;

REM
REM CREATE SEQUENCE SEQ_SC_ID
REM

CREATE SEQUENCE SEQ_SC_ID;

REM
REM CREATE SEQUENCE SEQ_ORDER_NUM
REM

CREATE SEQUENCE SEQ_ORDER_NUM;

REM
REM CREATE SEQUENCE SEQ_WO_INV
REM

CREATE SEQUENCE SEQ_WO_INV;

REM
REM CREATE SEQUENCE SEQ_INV_NUM
REM

CREATE SEQUENCE SEQ_INV_NUM;

REM
REM CREATE SEQUENCE SEQ_INV_ID
REM

CREATE SEQUENCE SEQ_INV_ID;

REM
REM INSERT INTO EMPLOYEES 
REM

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Howard','Hoddlestein'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Joe','Smith'
 , 2, 3); 

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Mike','West'
 , 2, 4);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Alice','Lindon'
 , 2, 3);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Al','Smith'
 , 2, 1);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Trish','West'
 , 2, 2);

INSERT INTO EMPLOYEES
(  EMPLOYEE_ID, FIRST_NAME, LAST_NAME
 , POSITION_ID, SHIP_ID)
VALUES
(  SEQ_EMPLOYEE_ID.NEXTVAL
 , 'Buffy','Worthington'
 , 2, 1);

REM
REM INSERT INTO CRUISE_ORDERS
REM

INSERT INTO CRUISE_ORDERS (
   CRUISE_ORDER_ID
 , ORDER_DATE
 , CRUISE_CUSTOMER_ID
 , SHIP_ID) 
VALUES 
(
   SEQ_CRUISE_ORDER_ID.NEXTVAL
 , '12-DEC-2013'
 , 6
 , 3
);

INSERT INTO CRUISE_ORDERS (
   CRUISE_ORDER_ID
 , ORDER_DATE
 , CRUISE_CUSTOMER_ID
 , SHIP_ID) 
VALUES 
(
   SEQ_CRUISE_ORDER_ID.NEXTVAL
 , '14-FEB-2013'
 , 3 
 , 1
);

INSERT INTO CRUISE_ORDERS (
   CRUISE_ORDER_ID
 , ORDER_DATE
 , CRUISE_CUSTOMER_ID
 , SHIP_ID) 
VALUES 
(
   SEQ_CRUISE_ORDER_ID.NEXTVAL
 , '03-JAN-2013'
 , 4
 , 2
);


REM
REM INSERT INTO PORTS
REM

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Baltimore', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Charleston', 'USA', 2)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Tampa', 'USA', 8)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Miami', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Galveston', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Diego', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Francisco', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Los Angeles', 'USA', 4)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Honolulu', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'St. Thomas', 'USA', 6)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'San Juan', 'USA', 3)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Nassau', 'Bahamas', 7)
;

INSERT INTO PORTS
(  PORT_ID, PORT_NAME, COUNTRY, CAPACITY)
VALUES
(  SEQ_PORT_ID.NEXTVAL
 , 'Grand Cayman', 'UK', 3)
;

REM
REM INSERT INTO SHIPS
REM

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Crystal', 2052, 855, 1) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Elegance', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Champion', 2974, 952, NULL) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Victorious', 2974, 952, 3) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Grandeur', 2446, 916, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Prince', 395, 470, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Harmony', 940, 790, 2) 
;

INSERT INTO SHIPS
(  SHIP_ID, SHIP_NAME, CAPACITY, LENGTH, HOME_PORT_ID)
VALUES
(  SEQ_SHIP_ID.NEXTVAL
 , 'Codd Voyager', 3114, 1020, 2) 
;

REM
REM INSERT INTO WO_INV
REM

INSERT INTO WO_INV
  (INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT)
  VALUES
  (SEQ_WO_INV.NEXTVAL, '12-DEC-09','14-DEC-09','12-DAF2-Z');

INSERT INTO WO_INV
  (INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT)
  VALUES
  (SEQ_WO_INV.NEXTVAL, '27-JAN-10','02-FEB-10','12-DAF3');

INSERT INTO WO_INV
  (INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT)
  VALUES
  (SEQ_WO_INV.NEXTVAL, '04-FEB-10','14-FEB-10','12-DB');

REM
REM INSERT INTO POSITIONS
REM

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Captain', 240000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Director', 1, 125000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Manager', 2, 120000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Crew Chief', 2, 88300);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES
  (  SEQ_POSITION_ID.NEXTVAL, 'Crew', 4, 65000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES                
  (  SEQ_POSITION_ID.NEXTVAL, 'Restaurant Chief', 3, 78000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES                
  (  SEQ_POSITION_ID.NEXTVAL, 'Chef', 6, 78000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES                
  (  SEQ_POSITION_ID.NEXTVAL, 'Maitre D', 6, 67000);

INSERT INTO POSITIONS 
  (  POSITION_ID, POSITION, REPORTS_TO, MAX_SALARY)
VALUES                
  (  SEQ_POSITION_ID.NEXTVAL, 'Server', 7, 24000);

REM
REM INSERT INTO SHIP_CABINS
REM

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 102        , 'Suite'    , 'Standard', 'Balcony',      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 103        , 'Stateroom', 'Standard', 'Ocean',      2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 104        , 'Suite'    , 'Standard', 'Balcony' ,      4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 105        , 'Stateroom', 'Standard', 'Ocean',      3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 106        , 'Suite'    , 'Standard', 'Balcony' ,      6,   586, 193);
  
INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 107        , 'Suite'    , 'Royal'   , 'Balcony',      5,  1524, 843);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 108        , 'Stateroom', 'Large'   , 'None' ,      2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 109        , 'Stateroom', 'Standard', 'Ocean' ,      2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 110        , 'Stateroom', 'Large'   , 'Ocean' ,      2,   225, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 701        , 'Suite'    , 'Presidential','Balcony',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 702        , 'Suite'    , 'Presidential','Balcony',    5,  1142, 476);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 703        , 'Suite'    , 'Royal'   , 'Balcony' ,      5,  1745, 974);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 704        , 'Suite'    , 'Skyloft' , 'Balcony' ,      8,   722, 410);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 705        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 706        , 'Suite' , 'Standard' , 'Balcony' ,     4,   533, 139);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 707        , 'Stateroom' , 'Standard' , 'Ocean' ,     3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 708        , 'Suite' , 'Standard' , 'Balcony' ,     6,   586, 193);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 709        , 'Stateroom' , 'Large' , 'None' ,     2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 710        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   180, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 801        , 'Suite'    , 'Presidential','None',    5,  1142, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 802        , 'Suite'    , 'Presidential','Ocean',    5,  1142, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 803        , 'Suite'    , 'Royal'   , 'Ocean' ,      5,  1745, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 804        , 'Suite'    , 'Skyloft' , 'Ocean' ,      8,   722, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 805        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   160, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 806        , 'Suite' , 'Standard' , 'Ocean' ,     4,   533, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 807        , 'Stateroom' , 'Standard' , 'Ocean' ,     3,   205, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 808        , 'Suite' , 'Standard' , 'None' ,     6,   586, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 809        , 'Stateroom' , 'Large' , 'None' ,     2,   211, NULL);

INSERT INTO SHIP_CABINS
  (  SHIP_CABIN_ID, SHIP_ID, ROOM_NUMBER, ROOM_STYLE , ROOM_TYPE ,  WINDOW, GUESTS, SQ_FT, BALCONY_SQ_FT)
VALUES               
  (  SEQ_SHIP_CABIN_ID.NEXTVAL
                  , 1      , 810        , 'Stateroom' , 'Standard' , 'Ocean' ,     2,   180, NULL);

REM
REM INSERT INTO WWA_INVOICES
REM

INSERT INTO WWA_INVOICES 
VALUES (10, 'WWA-200', '17-DEC-09', NULL);

INSERT INTO WWA_INVOICES 
VALUES (20, 'WWA-001', '23-DEC-09', NULL);

REM
REM INSERT INTO ONTARIO_ORDERS
REM

INSERT INTO ONTARIO_ORDERS
VALUES (882, 'WWA-001', 'C. Nelson');

INSERT INTO ONTARIO_ORDERS
VALUES (883, 'WWA-017', 'J. Metelsky');

INSERT INTO ONTARIO_ORDERS
VALUES (884, 'NBC-201', 'D. Knight');

REM
REM CREATE TABLE SHIP_CABIN_GRID
REM

CREATE TABLE SHIP_CABIN_GRID AS
SELECT UPPER(ROOM_TYPE) ROOM_TYPE, ROUND(OCEAN) OCEAN, ROUND(BALCONY) BALCONY, ROUND(NONE) NO_WINDOW
FROM   (SELECT ROOM_TYPE, WINDOW, SQ_FT FROM SHIP_CABINS) 
PIVOT 
(
  AVG(SQ_FT) FOR WINDOW IN ('Ocean' AS OCEAN, 
                            'Balcony' AS BALCONY, 'None' AS NONE)
 );

COMMIT;

You are ready to begin.
Page 561

CREATE TABLE INVOICES_ARCHIVED AS
   SELECT *
   FROM   INVOICES
   WHERE  SHIPPING_DATE < (ADD_MONTHS(SYSDATE,-12))
;

DESC INVOICES_ARCHIVED

Page 562

CREATE TABLE ROOM_SUMMARY AS
   SELECT A.SHIP_ID
        , A.SHIP_NAME
        , B.ROOM_NUMBER
        , B.SQ_FT + NVL(B.BALCONY_SQ_FT,0) TOT_SQ_FT
   FROM   SHIPS A JOIN SHIP_CABINS B
          ON A.SHIP_ID = B.SHIP_ID
;

(Author's note:  Here's a setup for the next script:

DROP TABLE ROOM_SUMMARY;

The above script allow you to run the next script.)

CREATE TABLE ROOM_SUMMARY 
(  SHIP_ID
 , SHIP_NAME
 , ROOM_NUMBER
 , TOT_SQ_FT)
AS
  SELECT A.SHIP_ID
       , A.SHIP_NAME
       , B.ROOM_NUMBER
       , B.SQ_FT + NVL(B.BALCONY_SQ_FT,0)
  FROM   SHIPS A JOIN SHIP_CABINS B
         ON A.SHIP_ID = B.SHIP_ID
;

Page 563

DESC ROOM_SUMMARY

Page 564

INSERT INTO CRUISE_CUSTOMERS
(  CRUISE_CUSTOMER_ID
 , FIRST_NAME
 , LAST_NAME)
SELECT SEQ_CRUISE_CUSTOMER_ID.NEXTVAL
     , EMP.FIRST_NAME
     , EMP.LAST_NAME
FROM   EMPLOYEES EMP
;

Page 565

SELECT   HOME_PORT_ID
       , COUNT(SHIP_ID) TOTAL_SHIPS
       , SUM(CAPACITY) TOTAL_SHIP_CAPACITY
FROM     SHIPS
GROUP BY HOME_PORT_ID
ORDER BY HOME_PORT_ID
;

Page 566

UPDATE PORTS PT
SET (  TOT_SHIPS_ASSIGNED
     , TOT_SHIPS_ASGN_CAP) =
    (SELECT COUNT(S.SHIP_ID) TOTAL_SHIPS
          , SUM(S.CAPACITY) TOTAL_SHIP_CAPACITY
     FROM     SHIPS S
     WHERE    S.HOME_PORT_ID = PT.PORT_ID
     GROUP BY S.HOME_PORT_ID)
;

Page 572

INSERT ALL
     INTO CO_2008     (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     INTO CO_ELCARO     (CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     INTO CO_ARCHIVED (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
SELECT CRUISE_ORDER_ID, ORDER_DATE, CRUISE_CUSTOMER_ID, SHIP_ID
FROM   CRUISE_ORDERS
;

Page 573

INSERT ALL
     INTO CO_2008     (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , SYSDATE
                       , 14
                       , 1)
     INTO CO_ELCARO   (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , ORDER_DATE+30
                       , 15
                       , 1)
     INTO CO_ARCHIVED (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
     VALUES           (  CRUISE_ORDER_ID
                       , ORDER_DATE
                       , CRUISE_CUSTOMER_ID
                       , SHIP_ID)
SELECT CRUISE_ORDER_ID, ORDER_DATE, CRUISE_CUSTOMER_ID, SHIP_ID
FROM   CRUISE_ORDERS
;

Page 575

INSERT FIRST
  WHEN (DATE_SHIPPED < (ADD_MONTHS(SYSDATE,-12))) THEN
    INTO INVOICES_ARCHIVED (  INVOICE_ID
                            , INVOICE_DATE
                            , SHIPPING_DATE
                            , ACCOUNT_NUMBER)
    VALUES                 (  INV_NO
                            , DATE_ENTERED
                            , DATE_SHIPPED
                            , CUST_ACCT)
  ELSE
    INTO INVOICES (  INVOICE_ID
                   , INVOICE_DATE
                   , SHIPPING_DATE
                   , ACCOUNT_NUMBER)
    VALUES        (  INV_NO
                   , DATE_ENTERED
                   , DATE_SHIPPED
                   , CUST_ACCT)
SELECT INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT
FROM WO_INV
;

Page 576

INSERT
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2009') THEN
    INTO INVOICES_THRU_2009 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2008') THEN
    INTO INVOICES_THRU_2008 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2007') THEN
    INTO INVOICES_THRU_2007 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
SELECT INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT
FROM WO_INV
;

Page 577

INSERT
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2009') THEN
    INTO INVOICES_THRU_2009 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2008') THEN
    INTO INVOICES_THRU_2008 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT)
    INTO INVOICES_CLOSED 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
  WHEN (TO_CHAR(DATE_SHIPPED,'RRRR') <= '2007') THEN
    INTO INVOICES_THRU_2007 
           (  INVOICE_ID
            , INVOICE_DATE
            , SHIPPING_DATE
            , ACCOUNT_NUMBER)
    VALUES (  INV_NO
            , DATE_ENTERED
            , DATE_SHIPPED
            , CUST_ACCT)
SELECT INV_NO, DATE_ENTERED, DATE_SHIPPED, CUST_ACCT
FROM WO_INV
;

Page 578

(Author's note:  The next statement produces an error message.  See the book for more information.)

INSERT
  WHEN (B.MAX_SALARY-A.MAX_SALARY < 10000) THEN
    INTO SALARY_CHART 
           (  EMP_TITLE
            , SUPERIOR
            , EMP_INCOME
            , SUP_INCOME)
    VALUES (  A.POSITION
            , B.POSITION
            , A.MAX_SALARY
            , B.MAX_SALARY)
SELECT A.POSITION
     , B.POSITION
     , A.MAX_SALARY
     , B.MAX_SALARY
FROM   POSITIONS A JOIN POSITIONS B
       ON A.REPORTS_TO = B.POSITION_ID
WHERE  A.MAX_SALARY > 100000
;

Page 579

INSERT
  WHEN (BOSS_SALARY-EMPLOYEE_SALARY < 10000) THEN
    INTO SALARY_CHART 
           (  EMP_TITLE
            , SUPERIOR
            , EMP_INCOME
            , SUP_INCOME)
    VALUES (  EMPLOYEE
            , BOSS
            , EMPLOYEE_SALARY
            , BOSS_SALARY)
SELECT A.POSITION EMPLOYEE
     , B.POSITION BOSS
     , A.MAX_SALARY EMPLOYEE_SALARY
     , B.MAX_SALARY BOSS_SALARY
FROM   POSITIONS A JOIN POSITIONS B
       ON A.REPORTS_TO = B.POSITION_ID
WHERE  A.MAX_SALARY > 100000
;

INSERT
  WHEN (TO_CHAR(DATE_ENTERED,'RRRR') <= '2009') THEN
    INTO INVOICES_ARCHIVED 
           (  INVOICE_ID
            , INVOICE_DATE)
    VALUES (  SEQ_INV_NUM.NEXTVAL
            , DATE_ENTERED)
SELECT INV_NO
     , DATE_ENTERED 
FROM   WO_INV
;

(Author's note:  You can use this script to test the concept of the above script:

SELECT SEQ_INV_NUM.NEXTVAL 
FROM DUAL;

The above script allow you to run the next script.)

Page 581

INSERT ALL
  WHEN OCEAN IS NOT NULL THEN
    INTO SHIP_CABIN_STATISTICS 
           (  ROOM_TYPE
            , WINDOW_TYPE
            , SQ_FT)
    VALUES (  ROOM_TYPE
            , 'OCEAN'
            , OCEAN)
  WHEN BALCONY IS NOT NULL THEN
    INTO SHIP_CABIN_STATISTICS 
           (  ROOM_TYPE
            , WINDOW_TYPE
            , SQ_FT)
    VALUES (  ROOM_TYPE
            , 'BALCONY'
            , BALCONY)
  WHEN NO_WINDOW IS NOT NULL THEN
    INTO SHIP_CABIN_STATISTICS 
           (  ROOM_TYPE
            , WINDOW_TYPE
            , SQ_FT)
    VALUES (  ROOM_TYPE
            , 'NO WINDOW'
            , NO_WINDOW)
SELECT ROWNUM RN
     , ROOM_TYPE
     , OCEAN
     , BALCONY
     , NO_WINDOW
FROM SHIP_CABIN_GRID
;

Page 582

SELECT   ROOM_TYPE
       , WINDOW_TYPE
       , SQ_FT
FROM     SHIP_CABIN_STATISTICS
ORDER BY ROOM_TYPE
       , WINDOW_TYPE
;

Page 584

MERGE INTO WWA_INVOICES WWA
  USING ONTARIO_ORDERS ONT
  ON    (WWA.CUST_PO = ONT.PO_NUM)
  WHEN  MATCHED THEN UPDATE SET
        WWA.NOTES = ONT.SALES_REP
  WHEN  NOT MATCHED THEN INSERT
        (  WWA.INV_ID
         , WWA.CUST_PO
         , WWA.INV_DATE
         , WWA.NOTES)
        VALUES
        (  SEQ_INV_ID.NEXTVAL
         , ONT.PO_NUM
         , SYSDATE
         , ONT.SALES_REP)
WHERE SUBSTR(ONT.PO_NUM,1,3) <> 'NBC'
;

Page 585

SELECT * 
FROM   WWA_INVOICES
;

Page 586

MERGE INTO WWA_INVOICES WWA
  USING ONTARIO_ORDERS ONT
  ON    (WWA.CUST_PO = ONT.PO_NUM)
  WHEN  MATCHED THEN UPDATE SET
        WWA.NOTES = ONT.SALES_REP
        DELETE WHERE WWA.INV_DATE < TO_DATE('01-SEP-09')
  WHEN  NOT MATCHED THEN INSERT
        (  WWA.INV_ID
         , WWA.CUST_PO
         , WWA.INV_DATE
         , WWA.NOTES)
        VALUES
        (  SEQ_INV_ID.NEXTVAL
         , ONT.PO_NUM
         , SYSDATE
         , ONT.SALES_REP)
WHERE   SUBSTR(ONT.PO_NUM,1,3) <> 'NBC';

Page 589

CREATE TABLE CHAT
(  CHAT_ID NUMBER(11) PRIMARY KEY
 , CHAT_USER VARCHAR2(9)
 , YACKING VARCHAR2(40)
);

CREATE SEQUENCE SEQ_CHAT_ID;

INSERT INTO CHAT VALUES (SEQ_CHAT_ID.NEXTVAL, USER, 'Hi there.');

INSERT INTO CHAT VALUES (SEQ_CHAT_ID.NEXTVAL, USER, 'Welcome to our chat room.');

INSERT INTO CHAT VALUES (SEQ_CHAT_ID.NEXTVAL, USER, 'Online order form is up.');

INSERT INTO CHAT VALUES (SEQ_CHAT_ID.NEXTVAL, USER, 'Over and out.');
COMMIT;

SELECT CHAT_ID
     , ORA_ROWSCN
     , SCN_TO_TIMESTAMP(ORA_ROWSCN)
FROM   CHAT
;

Page 590

EXECUTE DBMS_LOCK.SLEEP(120);

DELETE FROM CHAT;

COMMIT;

SELECT * FROM CHAT;

SELECT *
FROM   CHAT
AS OF  TIMESTAMP SYSTIMESTAMP - INTERVAL '0 0:01:30' DAY TO SECOND;

Page 591

SELECT NAME
     , VALUE
FROM   V$SYSTEM_PARAMETER
WHERE  NAME LIKE ('undo%');

Page 593

(Author's note:  If you have been working through the exercises in the book, and are expecting to see four rows resulting from the query that follows, note that you may need to change the time interval to something other than 90 seconds (0 0:01:30) to produce a result that shows the four rows you're looking for.)

SELECT CHAT_ID, CHAT_USER, YACKING
FROM   CHAT
AS OF TIMESTAMP SYSTIMESTAMP - INTERVAL '0 0:01:30' DAY TO SECOND
MINUS
SELECT CHAT_ID, CHAT_USER, YACKING
FROM CHAT;

Page 595

SELECT   CHAT_ID
       , VERSIONS_STARTSCN
       , VERSIONS_ENDSCN
       , VERSIONS_OPERATION
FROM     CHAT
VERSIONS BETWEEN TIMESTAMP MINVALUE
                       AND MAXVALUE
ORDER BY CHAT_ID
       , VERSIONS_OPERATION DESC
;

Page 596

(Author's note:  The following statement compares two version of the CHAT table:  the current version, and the version as of 15 minutes ago.  If you ran the CREATE TABLE CHAT script more recently, you'll get an error message indicating "unable to read data - table definition has changed".  To test the statement, you'll need to change the value for INTERVAL to a time since the initial creation of the CHAT table - try 15 seconds instead of 15 minutes, as in "INTERVAL '0 00:00:15'".)

SELECT   CHAT_ID
       , VERSIONS_STARTSCN
       , VERSIONS_ENDSCN
       , VERSIONS_OPERATION
FROM     CHAT
VERSIONS BETWEEN TIMESTAMP MINVALUE
                       AND MAXVALUE
AS OF    TIMESTAMP SYSTIMESTAMP - INTERVAL '0 00:15:00' DAY TO SECOND
ORDER BY CHAT_ID
       , VERSIONS_OPERATION DESC
;

Page 597

DESC FLASHBACK_TRANSACTION_QUERY;

Page 598

SELECT   CHAT_ID
       , VERSIONS_OPERATION
       , RAWTOHEX(VERSIONS_XID)
FROM     CHAT
VERSIONS BETWEEN TIMESTAMP MINVALUE AND MAXVALUE
WHERE    CHAT_ID = 1
ORDER BY VERSIONS_OPERATION DESC;


SELECT   UNDO_SQL
FROM     FLASHBACK_TRANSACTION_QUERY
WHERE    XID = (SELECT VERSIONS_XID
                FROM   CHAT
                VERSIONS BETWEEN TIMESTAMP MINVALUE
                                       AND MAXVALUE
                WHERE CHAT_ID = 1
                      AND 
                      VERSIONS_OPERATION = 'D')
;



16. Hierarchical Retrieval

Setup

Perform the Chapter 1 setup.  
You are ready to begin.
Page 617

CREATE TABLE EMPLOYEE_CHART
(  EMPLOYEE_ID NUMBER(7) PRIMARY KEY
 , TITLE       VARCHAR2(20)
 , REPORTS_TO  NUMBER(7)
);

ALTER TABLE EMPLOYEE_CHART
ADD   CONSTRAINT FK_EM_EM
      FOREIGN KEY (REPORTS_TO)
      REFERENCES EMPLOYEE_CHART (EMPLOYEE_ID)
;

(Author's note:  Here's a setup for the next script:

CREATE SEQUENCE SEQ_EMPLOYEE_ID;

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'CEO', NULL);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'VP', 1);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'SVP', 1);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'CFO', 1);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'Director 1', 2);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'Director 2', 2);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'Director 3', 3);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'Director 4', 3);

INSERT INTO EMPLOYEE_CHART
VALUES (SEQ_EMPLOYEE_ID.NEXTVAL, 'Manager 1', 6);

COMMIT;

The above script allow you to run the next script.)

Page 619

SELECT     LEVEL
         , EMPLOYEE_ID
         , TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
;

Page 621

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO  = PRIOR EMPLOYEE_ID
;

Page 622

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 9
CONNECT BY PRIOR REPORTS_TO = EMPLOYEE_ID
;

Page 623

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE_FORMATTED
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
ORDER BY   TITLE
;

Page 624

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE_FORMATTED
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
ORDER SIBLINGS BY TITLE
;

Page 625

SELECT     LEVEL
         , EMPLOYEE_ID
         , SYS_CONNECT_BY_PATH(TITLE,'/') TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
;

SELECT     LEVEL
         , EMPLOYEE_ID
         , TITLE
         , CONNECT_BY_ROOT TITLE AS ANCESTOR
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 3
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
;

Page 626

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
           AND 
           EMPLOYEE_ID <> 3
;

Page 627

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE
FROM       EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
           AND 
           TITLE <> 'SVP'
;

(Author's note:  Here's a setup for the next script:

CREATE TABLE FORMER_EMPLOYEES
(  FORMER_EMPLOYEES_ID  NUMBER PRIMARY KEY
 , ID                   NUMBER
 , FIRST_NAME           VARCHAR2(25)
 , LAST_NAME            VARCHAR2(30)
);

CREATE SEQUENCE SEQ_FORMER_EMPLOYEES_ID;

INSERT INTO FORMER_EMPLOYEES
VALUES (SEQ_FORMER_EMPLOYEES_ID.NEXTVAL, 5, 'Joe', 'Schmoe');

COMMIT;

The above script allow you to run the next script.)

SELECT     LEVEL
         , EMPLOYEE_ID
         , LPAD(' ', LEVEL*2) || TITLE TITLE
FROM       EMPLOYEE_CHART
WHERE      EMPLOYEE_ID NOT IN (SELECT ID FROM FORMER_EMPLOYEES)
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
           AND 
           TITLE <> 'SVP'
;



17. Regular Expression Support

Setup

Perform the Chapter 1 setup.  Next, execute the following:
SET ECHO ON

REM
REM CREATE TABLE 
REM

CREATE TABLE ORDER_ADDRESSES
(  ORDER_ADDRESS_ID NUMBER
 , ADDRESS1         VARCHAR2(40)
 , ADDRESS2         VARCHAR2(40)
);

REM
REM CREATE SEQUENCE SEQ_ORDER_ADDRESS_ID 
REM

CREATE SEQUENCE SEQ_ORDER_ADDRESS_ID;
 
REM
REM INSERT INTO ORDER_ADDRESSES
REM

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 ( SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Tulsa, OK 74103');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Bugscuffle, TN 37183');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Issaquah, WA 98027');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Santa Barbara, CA 93109');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Havre De Grace, MD 21078');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Ronks, PA 17572');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Weeki Wachee, FL 34607');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Kalamazoo, MI 49001');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Little Egg Harbor Township, NJ 08087');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Pumpkin Center, OK 74451');

INSERT INTO ORDER_ADDRESSES
 (ORDER_ADDRESS_ID, ADDRESS1, ADDRESS2)
 VALUES
 (SEQ_ORDER_ADDRESS_ID.NEXTVAL, NULL
  , 'Woonsocket, RI 02895');

COMMIT;

You are ready to begin.
Page 645

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[a-z]') ADDRESS
FROM   DUAL;

Page 646

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[A-Za-z]') ADDRESS
FROM   DUAL;

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[A-Za-z]+') ADDRESS
FROM   DUAL;

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[[:alpha:]]+') ADDRESS
FROM   DUAL;

Page 647

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[:alpha:]+') ADDRESS
FROM   DUAL;

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[[:alpha:]]+', 1, 2) ADDRESS
FROM   DUAL;

Page 648

SELECT REGEXP_SUBSTR('123 Maple Avenue', '[[:alnum:]]+') ADDRESS
FROM   DUAL;

SELECT ADDRESS2, REGEXP_SUBSTR(ADDRESS2,'[[:digit:]]+') ZIP_CODE
FROM   ORDER_ADDRESSES;

SELECT REGEXP_SUBSTR('123 Maple Avenue', 'Maple') ADDRESS
FROM DUAL;

Page 649

SELECT REGEXP_SUBSTR(
           'she sells sea shells down by the seashore'
         , 's[eashor]+e' ) THE_RESULT
FROM   DUAL;

SELECT REGEXP_SUBSTR(
           'she sells sea shells down by the seashore'
         , 's(eashor)e' ) THE_RESULT
FROM   DUAL;

SELECT REGEXP_SUBSTR(
           'she sells sea shells down by the seashore'
         , 'seashore' ) THE_RESULT
FROM   DUAL;

SELECT REGEXP_SUBSTR(
           'she sells sea shells down by the seashore'
         , '[[:alpha:]]+(shore)' ) THE_RESULT
FROM   DUAL;

Page 650

SELECT ADDRESS2
     , REGEXP_SUBSTR(ADDRESS2,'(TN|MD|OK)') STATE
FROM   ORDER_ADDRESSES;

SELECT REGEXP_SUBSTR(
         'Help desk: (212) 555-1212', '([[:digit:]]+)') AREA_CODE
FROM DUAL;

Page 651

SELECT REGEXP_SUBSTR(
         'Help desk: (212) 555-1212', '\([[:digit:]]+\)') AREA_CODE
FROM DUAL;

SELECT ADDRESS2
     , REGEXP_SUBSTR(ADDRESS2,'[TBH][[:alpha:]]+') NAME
FROM   ORDER_ADDRESSES;

Page 652

SELECT REGEXP_SUBSTR(
            'BMW-Oracle;Trimaran;February 2010'
          , '[^;]+', 1, 2) AMERICAS_CUP
FROM   DUAL;

SELECT ADDRESS2
     , REGEXP_SUBSTR(ADDRESS2,'[37]$') LAST_DIGIT
FROM   ORDER_ADDRESSES;

Page 653

SELECT ADDRESS2
     , REGEXP_SUBSTR(ADDRESS2,'37$') LAST_DIGIT
FROM   ORDER_ADDRESSES;

SELECT ADDRESS2
     , REGEXP_SUBSTR(ADDRESS2,'(83|78|1|2)$') LAST_DIGIT
FROM   ORDER_ADDRESSES;

Page 654

SELECT REGEXP_REPLACE(
           'Chapter 1 ......................... I Am Born'
         , '[.]+','-') TOC
FROM   DUAL;

SELECT REGEXP_REPLACE(
           'And then he said *&% so I replied with $@($*@'
         , '[!@#$%^&*()]','-') PRIME_TIME
FROM   DUAL;

SELECT REGEXP_REPLACE(
           'And then he said *&% so I replied with $@($*@'
         , '[!@#$%^&*()]+','-') PRIME_TIME
FROM   DUAL;

Page 655

SELECT REGEXP_REPLACE(
            'and in conclusion, 2/3rds of our revenue '
          , '( ){2,}', ' ') TEXT_LINE
FROM   DUAL;

SELECT ADDRESS2
     , REGEXP_REPLACE(  ADDRESS2
                      , '(^[[:alpha:]]+)'
                      , 'CITY') THE_STRING
FROM   ORDER_ADDRESSES
WHERE  ROWNUM <= 5;

Page 656

SELECT ADDRESS2
     , REGEXP_REPLACE(  ADDRESS2
                      , '(^[[:alpha:] ]+)'
                      , 'CITY') THE_STRING
FROM   ORDER_ADDRESSES
WHERE  ROWNUM <= 5;

Page 657

SELECT ADDRESS2
     , REGEXP_REPLACE( 
           ADDRESS2
         , '(^[[:alpha:] ]+), ([[:alpha:]]{2}) ([[:digit:]]{5})'
         , '\3 \2 \1') THE_STRING
FROM   ORDER_ADDRESSES
WHERE  ROWNUM <= 5;

Page 658

SELECT ADDRESS2
     , REGEXP_REPLACE(
           ADDRESS2
         , '(^[[:alpha:] ,]+) ([[:alpha:]]{2}) ([[:digit:]]{5})'
         , '\3 \2 \1') THE_STRING
FROM   ORDER_ADDRESSES
WHERE  ROWNUM <= 5;

SELECT ADDRESS2
     , REGEXP_REPLACE(
           ADDRESS2
         , '(^[[:alpha:] ]+), ([[:alpha:]]{2}) ([[:digit:]]{5})'
         , '\3 \2-"\1"') THE_STRING
FROM   ORDER_ADDRESSES
WHERE  ROWNUM <= 5;

Page 659

CREATE TABLE EMAIL_LIST
(  EMAIL_LIST_ID NUMBER(7) PRIMARY KEY
 , EMAIL1 VARCHAR2(120)
 , CONSTRAINT CK_EL_EMAIL1 
    CHECK (
      REGEXP_LIKE (
          EMAIL1
        , '^([[:alnum:]]+)@[[:alnum:]]+.(com|net|org|edu|gov|mil)$'
                  )
          )
);

Page 661

INSERT INTO EMAIL_LIST 
VALUES (1, 'someone@corbinian.com');

INSERT INTO EMAIL_LIST 
VALUES (2, 'lellison@oracle.omc');


18. Controlling User Access

Setup

Perform the Chapter 1 setup.  Next, execute the following:
WARNING!  Make sure your database doesn't have objects you wish to retain with the following names:
User accounts:  JOAN, HAROLD, LISA, HENRY, LAUREL, and HARDY.   
Roles: CRUISE_ANALYST, CRUISE_OPERATOR, and CRUISE_ACCOUNTANT.
Public synonym: WEBINARS
All are dropped by the following statements.
SET ECHO ON

REM
REM DROP USERS 
REM

DROP USER JOAN CASCADE;

DROP USER HAROLD CASCADE;

DROP USER LISA CASCADE;

DROP USER HENRY CASCADE;

DROP USER LAUREL CASCADE;

DROP USER HARDY CASCADE;

REM
REM DROP ROLES
REM

DROP ROLE CRUISE_ANALYST;

DROP ROLE CRUISE_OPERATOR;

DROP ROLE CRUISE_ACCOUNTANT;

REM
REM DROP PUBLIC SYNONYMS
REM

DROP PUBLIC SYNONYM WEBINARS;

REM
REM CREATE USER EFCODD
REM

CREATE USER EFCODD IDENTIFIED BY FOUNDER;

REM
REM GRANT DBA TO EFCODD
REM

GRANT DBA TO EFCODD;

REM
REM CONNECT TO EFCODD ACCOUNT
REM

CONNECT EFCODD/FOUNDER

REM
REM CREATE TABLE SHIPS IN EFCODD SCHEMA
REM

CREATE TABLE SHIPS
(  SHIP_ID             NUMBER(7)
 , SHIP_NAME           VARCHAR2(20)
 , CAPACITY            NUMBER
 , LENGTH              NUMBER
 , HOME_PORT_ID        NUMBER
 , CONSTRAINT          PK_SHIP 
                       PRIMARY KEY (SHIP_ID)
);

REM
REM CREATE TABLE PORTS IN EFCODD SCHEMA
REM

CREATE TABLE PORTS
(  PORT_ID             NUMBER
 , PORT_NAME           VARCHAR2(20)
 , COUNTRY             VARCHAR2(40)
 , CAPACITY            NUMBER
 , TOT_SHIPS_ASSIGNED  NUMBER(7)
 , TOT_SHIPS_ASGN_CAP  NUMBER(7)
 , CONSTRAINT          PK_PORT 
                       PRIMARY KEY (PORT_ID)
);

REM
REM CREATE TABLE EMPLOYEES IN EFCODD SCHEMA
REM

CREATE TABLE EMPLOYEES
(  EMPLOYEE_ID         NUMBER(7)
 , SHIP_ID             NUMBER(7)
 , FIRST_NAME          VARCHAR2(20)
 , LAST_NAME           VARCHAR2(30)
 , POSITION_ID         NUMBER
 , SSN                 VARCHAR2(11)
 , DOB                 DATE
 , PRIMARY_PHONE       VARCHAR2(20)
 , CONSTRAINT          PK_EMPLOYEES 
                       PRIMARY KEY (EMPLOYEE_ID)
); 

REM
REM CREATE TABLE INVOICES IN EFCODD SCHEMA
REM

CREATE TABLE INVOICES 
(  INVOICE_ID          NUMBER
 , INVOICE_DATE        DATE
 , ACCOUNT_NUMBER      VARCHAR2(80)
 , TERMS_OF_DISCOUNT   VARCHAR2(20)
 , VENDOR_ID           NUMBER
 , TOTAL_PRICE         NUMBER(8,2)
 , SHIPPING_DATE       DATE
 , CONSTRAINT PK_INVOICE_ID PRIMARY KEY (INVOICE_ID)
);

CONNECT CODD/EF


You are ready to begin.
Page 678

CREATE USER JOAN IDENTIFIED BY OFARC;

(Author's note:  Here's a setup for the next script:

GRANT DBA TO JOAN;

The above script allow you to run the next script.)

ALTER USER JOAN IDENTIFIED BY HAWAII;

CONNECT JOAN/HAWAII

Page 679

(Author's note:  The next CONNECT SYSTEM/MANAGER statement can be edited to connect to any schema with DBA privileges.)

CONNECT SYSTEM/MANAGER

CREATE USER HAROLD IDENTIFIED BY LLOYD;

GRANT CREATE SESSION TO HAROLD;

GRANT UNLIMITED TABLESPACE TO HAROLD;

GRANT CREATE TABLE TO HAROLD;

Page 680

CONNECT HAROLD/LLOYD

CREATE TABLE CLOCKTOWER (CLOCK_ID NUMBER(11));

(Author's note:  The next statement produces an error message.  See the book for more information.)

CREATE SEQUENCE SEQ_CLOCK_ID;

Page 682

(Author's note:  The next CONNECT SYSTEM/MANAGER statement can be edited to connect to any schema with DBA privileges.)

CONNECT SYSTEM/MANAGER

CREATE USER LAUREL IDENTIFIED BY POKE;

GRANT CREATE SESSION TO LAUREL;

GRANT UNLIMITED TABLESPACE TO LAUREL;

GRANT CREATE TABLE TO LAUREL;

CREATE USER HARDY IDENTIFIED BY CLOBBER;

GRANT CREATE SESSION TO HARDY;

GRANT UNLIMITED TABLESPACE TO HARDY;

GRANT CREATE ANY TABLE TO HARDY;

CONNECT LAUREL / POKE

CREATE TABLE MOVIES (MOVIE_ID NUMBER(7));

CONNECT HARDY / CLOBBER

CREATE TABLE LAUREL.TVSHOWS (TVSHOW_ID NUMBER(7));

Page 683

SELECT OWNER
     , TABLE_NAME
FROM   DBA_TABLES
WHERE  OWNER IN ('HARDY','LAUREL')
;

Page 685

GRANT CREATE ANY TABLE TO PUBLIC;

REVOKE CREATE ANY TABLE FROM PUBLIC;

Page 687

CONNECT SYSTEM/MANAGER

CREATE USER LISA IDENTIFIED BY POE;

GRANT CREATE SESSION, UNLIMITED TABLESPACE, CREATE TABLE TO LISA;

CREATE USER HENRY IDENTIFIED BY RUSSFUSS;

GRANT CREATE SESSION TO HENRY;

CONNECT LISA/POE

CREATE TABLE WEBINARS (WEBINAR_NAME VARCHAR2(20));

INSERT INTO WEBINARS VALUES ('ONLINE DEMO');

GRANT SELECT, UPDATE ON WEBINARS TO HENRY;

CONNECT HENRY/RUSSFUSS

SELECT * FROM LISA.WEBINARS;

UPDATE LISA.WEBINARS SET WEBINAR_NAME = 'ONLINE_TEST';

(Author's note:  The next statement produces an error message.  See the book for more information.)

INSERT INTO LISA.WEBINARS VALUES ('NEW ENTRY');
Page 688

SELECT * FROM WEBINARS;

SELECT * FROM LISA.WEBINARS;

GRANT CREATE PUBLIC SYNONYM TO LISA;

CREATE PUBLIC SYNONYM WEBINARS FOR LISA.WEBINARS;

SELECT * FROM WEBINARS;

Page 689

CONNECT LISA/POE

GRANT SELECT, UPDATE ON WEBINARS TO HENRY WITH GRANT OPTION;

Page 690

CONNECT HENRY/RUSSFUSS

GRANT SELECT ON LISA.WEBINARS TO HAROLD WITH GRANT OPTION;

(Author's note:  Here's a setup for the next script:

CONNECT CODD/EF

The above script allow you to run the next script.)

REVOKE SELECT, UPDATE ON WEBINARS FROM HENRY;

GRANT ALL PRIVILEGES ON WEBINARS TO HENRY;

GRANT ALL PRIVILEGES ON WEBINARS TO HENRY WITH GRANT OPTION;

GRANT ALL ON WEBINARS TO HENRY;

REVOKE ALL PRIVILEGES ON WEBINARS FROM HENRY;

REVOKE ALL ON WEBINARS FROM HENRY;

Page 692

SELECT   PRIVILEGE
       , ADMIN_OPTION
FROM     USER_SYS_PRIVS
ORDER BY PRIVILEGE
;

Page 693

SELECT   GRANTOR
       , OWNER
       , GRANTEE
       , TABLE_NAME
       , PRIVILEGE
       , GRANTABLE
FROM     USER_TAB_PRIVS
ORDER BY GRANTOR
       , OWNER
       , GRANTEE
       , TABLE_NAME
       , PRIVILEGE
;

Page 694

CONNECT EFCODD/FOUNDER

CREATE ROLE CRUISE_ANALYST;

GRANT SELECT ON SHIPS TO CRUISE_ANALYST;

GRANT SELECT ON PORTS TO CRUISE_ANALYST;

GRANT SELECT ON EMPLOYEES TO CRUISE_ANALYST;

CREATE ROLE CRUISE_OPERATOR;

GRANT SELECT, UPDATE, INSERT, DELETE ON SHIPS TO CRUISE_OPERATOR;

GRANT SELECT, UPDATE, INSERT, DELETE ON PORTS TO CRUISE_OPERATOR;

GRANT SELECT, UPDATE ON EMPLOYEES TO CRUISE_OPERATOR;

Page 695

GRANT CRUISE_OPERATOR TO LISA;

GRANT CRUISE_ANALYST TO HENRY;

GRANT CRUISE_OPERATOR TO LISA WITH ADMIN OPTION;

Page 697

REVOKE CRUISE_ANALYST FROM HENRY;

GRANT SELECT ON INVOICES TO HENRY;

CREATE ROLE CRUISE_ACCOUNTANT;

GRANT SELECT ON INVOICES TO CRUISE_ACCOUNTANT;

GRANT CRUISE_ACCOUNTANT TO HENRY;

REVOKE CRUISE_ACCOUNTANT FROM HENRY;

(Author's note:  Here's a setup for the next script:

DROP ROLE CRUISE_ACCOUNTANT;

The above script allow you to run the next script.)

GRANT SELECT ON INVOICES TO HENRY;

CREATE ROLE CRUISE_ACCOUNTANT;

GRANT SELECT ON INVOICES TO CRUISE_ACCOUNTANT;

GRANT CRUISE_ACCOUNTANT TO HENRY;

REVOKE SELECT ON INVOICES FROM HENRY;






